// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SvcDir.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SvcDir_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SvcDir_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SvcDir_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SvcDir_2eproto;
namespace ServiceDirectory {
class registerRequest;
class registerRequestDefaultTypeInternal;
extern registerRequestDefaultTypeInternal _registerRequest_default_instance_;
class registerResponse;
class registerResponseDefaultTypeInternal;
extern registerResponseDefaultTypeInternal _registerResponse_default_instance_;
class removeRequest;
class removeRequestDefaultTypeInternal;
extern removeRequestDefaultTypeInternal _removeRequest_default_instance_;
class removeResponse;
class removeResponseDefaultTypeInternal;
extern removeResponseDefaultTypeInternal _removeResponse_default_instance_;
class searchRequest;
class searchRequestDefaultTypeInternal;
extern searchRequestDefaultTypeInternal _searchRequest_default_instance_;
class searchResponse;
class searchResponseDefaultTypeInternal;
extern searchResponseDefaultTypeInternal _searchResponse_default_instance_;
class svcDirRequest;
class svcDirRequestDefaultTypeInternal;
extern svcDirRequestDefaultTypeInternal _svcDirRequest_default_instance_;
class svcDirResponse;
class svcDirResponseDefaultTypeInternal;
extern svcDirResponseDefaultTypeInternal _svcDirResponse_default_instance_;
}  // namespace ServiceDirectory
PROTOBUF_NAMESPACE_OPEN
template<> ::ServiceDirectory::registerRequest* Arena::CreateMaybeMessage<::ServiceDirectory::registerRequest>(Arena*);
template<> ::ServiceDirectory::registerResponse* Arena::CreateMaybeMessage<::ServiceDirectory::registerResponse>(Arena*);
template<> ::ServiceDirectory::removeRequest* Arena::CreateMaybeMessage<::ServiceDirectory::removeRequest>(Arena*);
template<> ::ServiceDirectory::removeResponse* Arena::CreateMaybeMessage<::ServiceDirectory::removeResponse>(Arena*);
template<> ::ServiceDirectory::searchRequest* Arena::CreateMaybeMessage<::ServiceDirectory::searchRequest>(Arena*);
template<> ::ServiceDirectory::searchResponse* Arena::CreateMaybeMessage<::ServiceDirectory::searchResponse>(Arena*);
template<> ::ServiceDirectory::svcDirRequest* Arena::CreateMaybeMessage<::ServiceDirectory::svcDirRequest>(Arena*);
template<> ::ServiceDirectory::svcDirResponse* Arena::CreateMaybeMessage<::ServiceDirectory::svcDirResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ServiceDirectory {

// ===================================================================

class svcDirRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.svcDirRequest) */ {
 public:
  inline svcDirRequest() : svcDirRequest(nullptr) {};
  virtual ~svcDirRequest();

  svcDirRequest(const svcDirRequest& from);
  svcDirRequest(svcDirRequest&& from) noexcept
    : svcDirRequest() {
    *this = ::std::move(from);
  }

  inline svcDirRequest& operator=(const svcDirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline svcDirRequest& operator=(svcDirRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const svcDirRequest& default_instance();

  enum FunctionCase {
    kRegisterArgs = 4,
    kSearchArgs = 5,
    kRemoveArgs = 6,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const svcDirRequest* internal_default_instance() {
    return reinterpret_cast<const svcDirRequest*>(
               &_svcDirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(svcDirRequest& a, svcDirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(svcDirRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(svcDirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline svcDirRequest* New() const final {
    return CreateMaybeMessage<svcDirRequest>(nullptr);
  }

  svcDirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<svcDirRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const svcDirRequest& from);
  void MergeFrom(const svcDirRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(svcDirRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.svcDirRequest";
  }
  protected:
  explicit svcDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialFieldNumber = 3,
    kRegisterArgsFieldNumber = 4,
    kSearchArgsFieldNumber = 5,
    kRemoveArgsFieldNumber = 6,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ServiceDirectory.registerRequest registerArgs = 4;
  bool has_registerargs() const;
  private:
  bool _internal_has_registerargs() const;
  public:
  void clear_registerargs();
  const ::ServiceDirectory::registerRequest& registerargs() const;
  ::ServiceDirectory::registerRequest* release_registerargs();
  ::ServiceDirectory::registerRequest* mutable_registerargs();
  void set_allocated_registerargs(::ServiceDirectory::registerRequest* registerargs);
  private:
  const ::ServiceDirectory::registerRequest& _internal_registerargs() const;
  ::ServiceDirectory::registerRequest* _internal_mutable_registerargs();
  public:
  void unsafe_arena_set_allocated_registerargs(
      ::ServiceDirectory::registerRequest* registerargs);
  ::ServiceDirectory::registerRequest* unsafe_arena_release_registerargs();

  // .ServiceDirectory.searchRequest searchArgs = 5;
  bool has_searchargs() const;
  private:
  bool _internal_has_searchargs() const;
  public:
  void clear_searchargs();
  const ::ServiceDirectory::searchRequest& searchargs() const;
  ::ServiceDirectory::searchRequest* release_searchargs();
  ::ServiceDirectory::searchRequest* mutable_searchargs();
  void set_allocated_searchargs(::ServiceDirectory::searchRequest* searchargs);
  private:
  const ::ServiceDirectory::searchRequest& _internal_searchargs() const;
  ::ServiceDirectory::searchRequest* _internal_mutable_searchargs();
  public:
  void unsafe_arena_set_allocated_searchargs(
      ::ServiceDirectory::searchRequest* searchargs);
  ::ServiceDirectory::searchRequest* unsafe_arena_release_searchargs();

  // .ServiceDirectory.removeRequest removeArgs = 6;
  bool has_removeargs() const;
  private:
  bool _internal_has_removeargs() const;
  public:
  void clear_removeargs();
  const ::ServiceDirectory::removeRequest& removeargs() const;
  ::ServiceDirectory::removeRequest* release_removeargs();
  ::ServiceDirectory::removeRequest* mutable_removeargs();
  void set_allocated_removeargs(::ServiceDirectory::removeRequest* removeargs);
  private:
  const ::ServiceDirectory::removeRequest& _internal_removeargs() const;
  ::ServiceDirectory::removeRequest* _internal_mutable_removeargs();
  public:
  void unsafe_arena_set_allocated_removeargs(
      ::ServiceDirectory::removeRequest* removeargs);
  ::ServiceDirectory::removeRequest* unsafe_arena_release_removeargs();

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:ServiceDirectory.svcDirRequest)
 private:
  class _Internal;
  void set_has_registerargs();
  void set_has_searchargs();
  void set_has_removeargs();

  inline bool has_function() const;
  inline void clear_has_function();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::ServiceDirectory::registerRequest* registerargs_;
    ::ServiceDirectory::searchRequest* searchargs_;
    ::ServiceDirectory::removeRequest* removeargs_;
  } function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class registerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.registerRequest) */ {
 public:
  inline registerRequest() : registerRequest(nullptr) {};
  virtual ~registerRequest();

  registerRequest(const registerRequest& from);
  registerRequest(registerRequest&& from) noexcept
    : registerRequest() {
    *this = ::std::move(from);
  }

  inline registerRequest& operator=(const registerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerRequest& operator=(registerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const registerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerRequest* internal_default_instance() {
    return reinterpret_cast<const registerRequest*>(
               &_registerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(registerRequest& a, registerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(registerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline registerRequest* New() const final {
    return CreateMaybeMessage<registerRequest>(nullptr);
  }

  registerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<registerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const registerRequest& from);
  void MergeFrom(const registerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.registerRequest";
  }
  protected:
  explicit registerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServerNameFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string serviceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_servicename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_servicename(
      std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string serverName = 2;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_servername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_servername(
      std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceDirectory.registerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class searchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.searchRequest) */ {
 public:
  inline searchRequest() : searchRequest(nullptr) {};
  virtual ~searchRequest();

  searchRequest(const searchRequest& from);
  searchRequest(searchRequest&& from) noexcept
    : searchRequest() {
    *this = ::std::move(from);
  }

  inline searchRequest& operator=(const searchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline searchRequest& operator=(searchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const searchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchRequest* internal_default_instance() {
    return reinterpret_cast<const searchRequest*>(
               &_searchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(searchRequest& a, searchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(searchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(searchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline searchRequest* New() const final {
    return CreateMaybeMessage<searchRequest>(nullptr);
  }

  searchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<searchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const searchRequest& from);
  void MergeFrom(const searchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.searchRequest";
  }
  protected:
  explicit searchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // string serviceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_servicename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_servicename(
      std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // @@protoc_insertion_point(class_scope:ServiceDirectory.searchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class removeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.removeRequest) */ {
 public:
  inline removeRequest() : removeRequest(nullptr) {};
  virtual ~removeRequest();

  removeRequest(const removeRequest& from);
  removeRequest(removeRequest&& from) noexcept
    : removeRequest() {
    *this = ::std::move(from);
  }

  inline removeRequest& operator=(const removeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeRequest& operator=(removeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const removeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const removeRequest* internal_default_instance() {
    return reinterpret_cast<const removeRequest*>(
               &_removeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(removeRequest& a, removeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeRequest* New() const final {
    return CreateMaybeMessage<removeRequest>(nullptr);
  }

  removeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const removeRequest& from);
  void MergeFrom(const removeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.removeRequest";
  }
  protected:
  explicit removeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // string serviceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_servicename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_servicename(
      std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // @@protoc_insertion_point(class_scope:ServiceDirectory.removeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class svcDirResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.svcDirResponse) */ {
 public:
  inline svcDirResponse() : svcDirResponse(nullptr) {};
  virtual ~svcDirResponse();

  svcDirResponse(const svcDirResponse& from);
  svcDirResponse(svcDirResponse&& from) noexcept
    : svcDirResponse() {
    *this = ::std::move(from);
  }

  inline svcDirResponse& operator=(const svcDirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline svcDirResponse& operator=(svcDirResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const svcDirResponse& default_instance();

  enum FunctionCase {
    kRegisterRes = 4,
    kSearchRes = 5,
    kRemoveRes = 6,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const svcDirResponse* internal_default_instance() {
    return reinterpret_cast<const svcDirResponse*>(
               &_svcDirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(svcDirResponse& a, svcDirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(svcDirResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(svcDirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline svcDirResponse* New() const final {
    return CreateMaybeMessage<svcDirResponse>(nullptr);
  }

  svcDirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<svcDirResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const svcDirResponse& from);
  void MergeFrom(const svcDirResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(svcDirResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.svcDirResponse";
  }
  protected:
  explicit svcDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialFieldNumber = 3,
    kRegisterResFieldNumber = 4,
    kSearchResFieldNumber = 5,
    kRemoveResFieldNumber = 6,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ServiceDirectory.registerResponse registerRes = 4;
  bool has_registerres() const;
  private:
  bool _internal_has_registerres() const;
  public:
  void clear_registerres();
  const ::ServiceDirectory::registerResponse& registerres() const;
  ::ServiceDirectory::registerResponse* release_registerres();
  ::ServiceDirectory::registerResponse* mutable_registerres();
  void set_allocated_registerres(::ServiceDirectory::registerResponse* registerres);
  private:
  const ::ServiceDirectory::registerResponse& _internal_registerres() const;
  ::ServiceDirectory::registerResponse* _internal_mutable_registerres();
  public:
  void unsafe_arena_set_allocated_registerres(
      ::ServiceDirectory::registerResponse* registerres);
  ::ServiceDirectory::registerResponse* unsafe_arena_release_registerres();

  // .ServiceDirectory.searchResponse searchRes = 5;
  bool has_searchres() const;
  private:
  bool _internal_has_searchres() const;
  public:
  void clear_searchres();
  const ::ServiceDirectory::searchResponse& searchres() const;
  ::ServiceDirectory::searchResponse* release_searchres();
  ::ServiceDirectory::searchResponse* mutable_searchres();
  void set_allocated_searchres(::ServiceDirectory::searchResponse* searchres);
  private:
  const ::ServiceDirectory::searchResponse& _internal_searchres() const;
  ::ServiceDirectory::searchResponse* _internal_mutable_searchres();
  public:
  void unsafe_arena_set_allocated_searchres(
      ::ServiceDirectory::searchResponse* searchres);
  ::ServiceDirectory::searchResponse* unsafe_arena_release_searchres();

  // .ServiceDirectory.removeResponse removeRes = 6;
  bool has_removeres() const;
  private:
  bool _internal_has_removeres() const;
  public:
  void clear_removeres();
  const ::ServiceDirectory::removeResponse& removeres() const;
  ::ServiceDirectory::removeResponse* release_removeres();
  ::ServiceDirectory::removeResponse* mutable_removeres();
  void set_allocated_removeres(::ServiceDirectory::removeResponse* removeres);
  private:
  const ::ServiceDirectory::removeResponse& _internal_removeres() const;
  ::ServiceDirectory::removeResponse* _internal_mutable_removeres();
  public:
  void unsafe_arena_set_allocated_removeres(
      ::ServiceDirectory::removeResponse* removeres);
  ::ServiceDirectory::removeResponse* unsafe_arena_release_removeres();

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:ServiceDirectory.svcDirResponse)
 private:
  class _Internal;
  void set_has_registerres();
  void set_has_searchres();
  void set_has_removeres();

  inline bool has_function() const;
  inline void clear_has_function();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::ServiceDirectory::registerResponse* registerres_;
    ::ServiceDirectory::searchResponse* searchres_;
    ::ServiceDirectory::removeResponse* removeres_;
  } function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class registerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.registerResponse) */ {
 public:
  inline registerResponse() : registerResponse(nullptr) {};
  virtual ~registerResponse();

  registerResponse(const registerResponse& from);
  registerResponse(registerResponse&& from) noexcept
    : registerResponse() {
    *this = ::std::move(from);
  }

  inline registerResponse& operator=(const registerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerResponse& operator=(registerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const registerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerResponse* internal_default_instance() {
    return reinterpret_cast<const registerResponse*>(
               &_registerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(registerResponse& a, registerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(registerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline registerResponse* New() const final {
    return CreateMaybeMessage<registerResponse>(nullptr);
  }

  registerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<registerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const registerResponse& from);
  void MergeFrom(const registerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.registerResponse";
  }
  protected:
  explicit registerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceDirectory.registerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class removeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.removeResponse) */ {
 public:
  inline removeResponse() : removeResponse(nullptr) {};
  virtual ~removeResponse();

  removeResponse(const removeResponse& from);
  removeResponse(removeResponse&& from) noexcept
    : removeResponse() {
    *this = ::std::move(from);
  }

  inline removeResponse& operator=(const removeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeResponse& operator=(removeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const removeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const removeResponse* internal_default_instance() {
    return reinterpret_cast<const removeResponse*>(
               &_removeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(removeResponse& a, removeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeResponse* New() const final {
    return CreateMaybeMessage<removeResponse>(nullptr);
  }

  removeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const removeResponse& from);
  void MergeFrom(const removeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.removeResponse";
  }
  protected:
  explicit removeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceDirectory.removeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvcDir_2eproto;
};
// -------------------------------------------------------------------

class searchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceDirectory.searchResponse) */ {
 public:
  inline searchResponse() : searchResponse(nullptr) {};
  virtual ~searchResponse();

  searchResponse(const searchResponse& from);
  searchResponse(searchResponse&& from) noexcept
    : searchResponse() {
    *this = ::std::move(from);
  }

  inline searchResponse& operator=(const searchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline searchResponse& operator=(searchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const searchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchResponse* internal_default_instance() {
    return reinterpret_cast<const searchResponse*>(
               &_searchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(searchResponse& a, searchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(searchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(searchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline searchResponse* New() const final {
    return CreateMaybeMessage<searchResponse>(nullptr);
  }

  searchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<searchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const searchResponse& from);
  void MergeFrom(const searchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceDirectory.searchResponse";
  }
  protected:
  explicit searchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SvcDir_2eproto);
    return ::descriptor_table_SvcDir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kStatusFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string serverName = 2;
  void clear_servername();
  const std::string& servername() const;
  void set_servername(const std::string& value);
  void set_servername(std::string&& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  std::string* mutable_servername();
  std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_servername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_servername(
      std::string* servername);
  private:
  const std::string& _internal_servername() const;
  void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ServiceDirectory.searchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SvcDir_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// svcDirRequest

// uint32 magic = 1;
inline void svcDirRequest::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirRequest::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirRequest::magic() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirRequest.magic)
  return _internal_magic();
}
inline void svcDirRequest::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void svcDirRequest::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.svcDirRequest.magic)
}

// uint32 version = 2;
inline void svcDirRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirRequest::version() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirRequest.version)
  return _internal_version();
}
inline void svcDirRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void svcDirRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.svcDirRequest.version)
}

// uint32 serial = 3;
inline void svcDirRequest::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirRequest::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirRequest::serial() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirRequest.serial)
  return _internal_serial();
}
inline void svcDirRequest::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void svcDirRequest::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.svcDirRequest.serial)
}

// .ServiceDirectory.registerRequest registerArgs = 4;
inline bool svcDirRequest::_internal_has_registerargs() const {
  return function_case() == kRegisterArgs;
}
inline bool svcDirRequest::has_registerargs() const {
  return _internal_has_registerargs();
}
inline void svcDirRequest::set_has_registerargs() {
  _oneof_case_[0] = kRegisterArgs;
}
inline void svcDirRequest::clear_registerargs() {
  if (_internal_has_registerargs()) {
    if (GetArena() == nullptr) {
      delete function_.registerargs_;
    }
    clear_has_function();
  }
}
inline ::ServiceDirectory::registerRequest* svcDirRequest::release_registerargs() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.svcDirRequest.registerArgs)
  if (_internal_has_registerargs()) {
    clear_has_function();
      ::ServiceDirectory::registerRequest* temp = function_.registerargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.registerargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServiceDirectory::registerRequest& svcDirRequest::_internal_registerargs() const {
  return _internal_has_registerargs()
      ? *function_.registerargs_
      : *reinterpret_cast< ::ServiceDirectory::registerRequest*>(&::ServiceDirectory::_registerRequest_default_instance_);
}
inline const ::ServiceDirectory::registerRequest& svcDirRequest::registerargs() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirRequest.registerArgs)
  return _internal_registerargs();
}
inline ::ServiceDirectory::registerRequest* svcDirRequest::unsafe_arena_release_registerargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.svcDirRequest.registerArgs)
  if (_internal_has_registerargs()) {
    clear_has_function();
    ::ServiceDirectory::registerRequest* temp = function_.registerargs_;
    function_.registerargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void svcDirRequest::unsafe_arena_set_allocated_registerargs(::ServiceDirectory::registerRequest* registerargs) {
  clear_function();
  if (registerargs) {
    set_has_registerargs();
    function_.registerargs_ = registerargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.svcDirRequest.registerArgs)
}
inline ::ServiceDirectory::registerRequest* svcDirRequest::_internal_mutable_registerargs() {
  if (!_internal_has_registerargs()) {
    clear_function();
    set_has_registerargs();
    function_.registerargs_ = CreateMaybeMessage< ::ServiceDirectory::registerRequest >(GetArena());
  }
  return function_.registerargs_;
}
inline ::ServiceDirectory::registerRequest* svcDirRequest::mutable_registerargs() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.svcDirRequest.registerArgs)
  return _internal_mutable_registerargs();
}

// .ServiceDirectory.searchRequest searchArgs = 5;
inline bool svcDirRequest::_internal_has_searchargs() const {
  return function_case() == kSearchArgs;
}
inline bool svcDirRequest::has_searchargs() const {
  return _internal_has_searchargs();
}
inline void svcDirRequest::set_has_searchargs() {
  _oneof_case_[0] = kSearchArgs;
}
inline void svcDirRequest::clear_searchargs() {
  if (_internal_has_searchargs()) {
    if (GetArena() == nullptr) {
      delete function_.searchargs_;
    }
    clear_has_function();
  }
}
inline ::ServiceDirectory::searchRequest* svcDirRequest::release_searchargs() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.svcDirRequest.searchArgs)
  if (_internal_has_searchargs()) {
    clear_has_function();
      ::ServiceDirectory::searchRequest* temp = function_.searchargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.searchargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServiceDirectory::searchRequest& svcDirRequest::_internal_searchargs() const {
  return _internal_has_searchargs()
      ? *function_.searchargs_
      : *reinterpret_cast< ::ServiceDirectory::searchRequest*>(&::ServiceDirectory::_searchRequest_default_instance_);
}
inline const ::ServiceDirectory::searchRequest& svcDirRequest::searchargs() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirRequest.searchArgs)
  return _internal_searchargs();
}
inline ::ServiceDirectory::searchRequest* svcDirRequest::unsafe_arena_release_searchargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.svcDirRequest.searchArgs)
  if (_internal_has_searchargs()) {
    clear_has_function();
    ::ServiceDirectory::searchRequest* temp = function_.searchargs_;
    function_.searchargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void svcDirRequest::unsafe_arena_set_allocated_searchargs(::ServiceDirectory::searchRequest* searchargs) {
  clear_function();
  if (searchargs) {
    set_has_searchargs();
    function_.searchargs_ = searchargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.svcDirRequest.searchArgs)
}
inline ::ServiceDirectory::searchRequest* svcDirRequest::_internal_mutable_searchargs() {
  if (!_internal_has_searchargs()) {
    clear_function();
    set_has_searchargs();
    function_.searchargs_ = CreateMaybeMessage< ::ServiceDirectory::searchRequest >(GetArena());
  }
  return function_.searchargs_;
}
inline ::ServiceDirectory::searchRequest* svcDirRequest::mutable_searchargs() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.svcDirRequest.searchArgs)
  return _internal_mutable_searchargs();
}

// .ServiceDirectory.removeRequest removeArgs = 6;
inline bool svcDirRequest::_internal_has_removeargs() const {
  return function_case() == kRemoveArgs;
}
inline bool svcDirRequest::has_removeargs() const {
  return _internal_has_removeargs();
}
inline void svcDirRequest::set_has_removeargs() {
  _oneof_case_[0] = kRemoveArgs;
}
inline void svcDirRequest::clear_removeargs() {
  if (_internal_has_removeargs()) {
    if (GetArena() == nullptr) {
      delete function_.removeargs_;
    }
    clear_has_function();
  }
}
inline ::ServiceDirectory::removeRequest* svcDirRequest::release_removeargs() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.svcDirRequest.removeArgs)
  if (_internal_has_removeargs()) {
    clear_has_function();
      ::ServiceDirectory::removeRequest* temp = function_.removeargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.removeargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServiceDirectory::removeRequest& svcDirRequest::_internal_removeargs() const {
  return _internal_has_removeargs()
      ? *function_.removeargs_
      : *reinterpret_cast< ::ServiceDirectory::removeRequest*>(&::ServiceDirectory::_removeRequest_default_instance_);
}
inline const ::ServiceDirectory::removeRequest& svcDirRequest::removeargs() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirRequest.removeArgs)
  return _internal_removeargs();
}
inline ::ServiceDirectory::removeRequest* svcDirRequest::unsafe_arena_release_removeargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.svcDirRequest.removeArgs)
  if (_internal_has_removeargs()) {
    clear_has_function();
    ::ServiceDirectory::removeRequest* temp = function_.removeargs_;
    function_.removeargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void svcDirRequest::unsafe_arena_set_allocated_removeargs(::ServiceDirectory::removeRequest* removeargs) {
  clear_function();
  if (removeargs) {
    set_has_removeargs();
    function_.removeargs_ = removeargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.svcDirRequest.removeArgs)
}
inline ::ServiceDirectory::removeRequest* svcDirRequest::_internal_mutable_removeargs() {
  if (!_internal_has_removeargs()) {
    clear_function();
    set_has_removeargs();
    function_.removeargs_ = CreateMaybeMessage< ::ServiceDirectory::removeRequest >(GetArena());
  }
  return function_.removeargs_;
}
inline ::ServiceDirectory::removeRequest* svcDirRequest::mutable_removeargs() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.svcDirRequest.removeArgs)
  return _internal_mutable_removeargs();
}

inline bool svcDirRequest::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void svcDirRequest::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline svcDirRequest::FunctionCase svcDirRequest::function_case() const {
  return svcDirRequest::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerRequest

// string serviceName = 1;
inline void registerRequest::clear_servicename() {
  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& registerRequest::servicename() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.registerRequest.serviceName)
  return _internal_servicename();
}
inline void registerRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.registerRequest.serviceName)
}
inline std::string* registerRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.registerRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& registerRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void registerRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void registerRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServiceDirectory.registerRequest.serviceName)
}
inline void registerRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServiceDirectory.registerRequest.serviceName)
}
inline void registerRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServiceDirectory.registerRequest.serviceName)
}
inline std::string* registerRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* registerRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.registerRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void registerRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.registerRequest.serviceName)
}
inline std::string* registerRequest::unsafe_arena_release_servicename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.registerRequest.serviceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return servicename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void registerRequest::unsafe_arena_set_allocated_servicename(
    std::string* servicename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      servicename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.registerRequest.serviceName)
}

// string serverName = 2;
inline void registerRequest::clear_servername() {
  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& registerRequest::servername() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.registerRequest.serverName)
  return _internal_servername();
}
inline void registerRequest::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.registerRequest.serverName)
}
inline std::string* registerRequest::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.registerRequest.serverName)
  return _internal_mutable_servername();
}
inline const std::string& registerRequest::_internal_servername() const {
  return servername_.Get();
}
inline void registerRequest::_internal_set_servername(const std::string& value) {
  
  servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void registerRequest::set_servername(std::string&& value) {
  
  servername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServiceDirectory.registerRequest.serverName)
}
inline void registerRequest::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServiceDirectory.registerRequest.serverName)
}
inline void registerRequest::set_servername(const char* value,
    size_t size) {
  
  servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServiceDirectory.registerRequest.serverName)
}
inline std::string* registerRequest::_internal_mutable_servername() {
  
  return servername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* registerRequest::release_servername() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.registerRequest.serverName)
  return servername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void registerRequest::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.registerRequest.serverName)
}
inline std::string* registerRequest::unsafe_arena_release_servername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.registerRequest.serverName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return servername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void registerRequest::unsafe_arena_set_allocated_servername(
    std::string* servername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      servername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.registerRequest.serverName)
}

// uint32 port = 3;
inline void registerRequest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 registerRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 registerRequest::port() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.registerRequest.port)
  return _internal_port();
}
inline void registerRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void registerRequest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.registerRequest.port)
}

// -------------------------------------------------------------------

// searchRequest

// string serviceName = 1;
inline void searchRequest::clear_servicename() {
  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& searchRequest::servicename() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.searchRequest.serviceName)
  return _internal_servicename();
}
inline void searchRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.searchRequest.serviceName)
}
inline std::string* searchRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.searchRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& searchRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void searchRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void searchRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServiceDirectory.searchRequest.serviceName)
}
inline void searchRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServiceDirectory.searchRequest.serviceName)
}
inline void searchRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServiceDirectory.searchRequest.serviceName)
}
inline std::string* searchRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* searchRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.searchRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void searchRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.searchRequest.serviceName)
}
inline std::string* searchRequest::unsafe_arena_release_servicename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.searchRequest.serviceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return servicename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void searchRequest::unsafe_arena_set_allocated_servicename(
    std::string* servicename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      servicename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.searchRequest.serviceName)
}

// -------------------------------------------------------------------

// removeRequest

// string serviceName = 1;
inline void removeRequest::clear_servicename() {
  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& removeRequest::servicename() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.removeRequest.serviceName)
  return _internal_servicename();
}
inline void removeRequest::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.removeRequest.serviceName)
}
inline std::string* removeRequest::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.removeRequest.serviceName)
  return _internal_mutable_servicename();
}
inline const std::string& removeRequest::_internal_servicename() const {
  return servicename_.Get();
}
inline void removeRequest::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void removeRequest::set_servicename(std::string&& value) {
  
  servicename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServiceDirectory.removeRequest.serviceName)
}
inline void removeRequest::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServiceDirectory.removeRequest.serviceName)
}
inline void removeRequest::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServiceDirectory.removeRequest.serviceName)
}
inline std::string* removeRequest::_internal_mutable_servicename() {
  
  return servicename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* removeRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.removeRequest.serviceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void removeRequest::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.removeRequest.serviceName)
}
inline std::string* removeRequest::unsafe_arena_release_servicename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.removeRequest.serviceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return servicename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void removeRequest::unsafe_arena_set_allocated_servicename(
    std::string* servicename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      servicename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.removeRequest.serviceName)
}

// -------------------------------------------------------------------

// svcDirResponse

// uint32 magic = 1;
inline void svcDirResponse::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirResponse::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirResponse::magic() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirResponse.magic)
  return _internal_magic();
}
inline void svcDirResponse::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void svcDirResponse::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.svcDirResponse.magic)
}

// uint32 version = 2;
inline void svcDirResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirResponse::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirResponse::version() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirResponse.version)
  return _internal_version();
}
inline void svcDirResponse::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void svcDirResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.svcDirResponse.version)
}

// uint32 serial = 3;
inline void svcDirResponse::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirResponse::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 svcDirResponse::serial() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirResponse.serial)
  return _internal_serial();
}
inline void svcDirResponse::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void svcDirResponse::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.svcDirResponse.serial)
}

// .ServiceDirectory.registerResponse registerRes = 4;
inline bool svcDirResponse::_internal_has_registerres() const {
  return function_case() == kRegisterRes;
}
inline bool svcDirResponse::has_registerres() const {
  return _internal_has_registerres();
}
inline void svcDirResponse::set_has_registerres() {
  _oneof_case_[0] = kRegisterRes;
}
inline void svcDirResponse::clear_registerres() {
  if (_internal_has_registerres()) {
    if (GetArena() == nullptr) {
      delete function_.registerres_;
    }
    clear_has_function();
  }
}
inline ::ServiceDirectory::registerResponse* svcDirResponse::release_registerres() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.svcDirResponse.registerRes)
  if (_internal_has_registerres()) {
    clear_has_function();
      ::ServiceDirectory::registerResponse* temp = function_.registerres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.registerres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServiceDirectory::registerResponse& svcDirResponse::_internal_registerres() const {
  return _internal_has_registerres()
      ? *function_.registerres_
      : *reinterpret_cast< ::ServiceDirectory::registerResponse*>(&::ServiceDirectory::_registerResponse_default_instance_);
}
inline const ::ServiceDirectory::registerResponse& svcDirResponse::registerres() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirResponse.registerRes)
  return _internal_registerres();
}
inline ::ServiceDirectory::registerResponse* svcDirResponse::unsafe_arena_release_registerres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.svcDirResponse.registerRes)
  if (_internal_has_registerres()) {
    clear_has_function();
    ::ServiceDirectory::registerResponse* temp = function_.registerres_;
    function_.registerres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void svcDirResponse::unsafe_arena_set_allocated_registerres(::ServiceDirectory::registerResponse* registerres) {
  clear_function();
  if (registerres) {
    set_has_registerres();
    function_.registerres_ = registerres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.svcDirResponse.registerRes)
}
inline ::ServiceDirectory::registerResponse* svcDirResponse::_internal_mutable_registerres() {
  if (!_internal_has_registerres()) {
    clear_function();
    set_has_registerres();
    function_.registerres_ = CreateMaybeMessage< ::ServiceDirectory::registerResponse >(GetArena());
  }
  return function_.registerres_;
}
inline ::ServiceDirectory::registerResponse* svcDirResponse::mutable_registerres() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.svcDirResponse.registerRes)
  return _internal_mutable_registerres();
}

// .ServiceDirectory.searchResponse searchRes = 5;
inline bool svcDirResponse::_internal_has_searchres() const {
  return function_case() == kSearchRes;
}
inline bool svcDirResponse::has_searchres() const {
  return _internal_has_searchres();
}
inline void svcDirResponse::set_has_searchres() {
  _oneof_case_[0] = kSearchRes;
}
inline void svcDirResponse::clear_searchres() {
  if (_internal_has_searchres()) {
    if (GetArena() == nullptr) {
      delete function_.searchres_;
    }
    clear_has_function();
  }
}
inline ::ServiceDirectory::searchResponse* svcDirResponse::release_searchres() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.svcDirResponse.searchRes)
  if (_internal_has_searchres()) {
    clear_has_function();
      ::ServiceDirectory::searchResponse* temp = function_.searchres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.searchres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServiceDirectory::searchResponse& svcDirResponse::_internal_searchres() const {
  return _internal_has_searchres()
      ? *function_.searchres_
      : *reinterpret_cast< ::ServiceDirectory::searchResponse*>(&::ServiceDirectory::_searchResponse_default_instance_);
}
inline const ::ServiceDirectory::searchResponse& svcDirResponse::searchres() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirResponse.searchRes)
  return _internal_searchres();
}
inline ::ServiceDirectory::searchResponse* svcDirResponse::unsafe_arena_release_searchres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.svcDirResponse.searchRes)
  if (_internal_has_searchres()) {
    clear_has_function();
    ::ServiceDirectory::searchResponse* temp = function_.searchres_;
    function_.searchres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void svcDirResponse::unsafe_arena_set_allocated_searchres(::ServiceDirectory::searchResponse* searchres) {
  clear_function();
  if (searchres) {
    set_has_searchres();
    function_.searchres_ = searchres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.svcDirResponse.searchRes)
}
inline ::ServiceDirectory::searchResponse* svcDirResponse::_internal_mutable_searchres() {
  if (!_internal_has_searchres()) {
    clear_function();
    set_has_searchres();
    function_.searchres_ = CreateMaybeMessage< ::ServiceDirectory::searchResponse >(GetArena());
  }
  return function_.searchres_;
}
inline ::ServiceDirectory::searchResponse* svcDirResponse::mutable_searchres() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.svcDirResponse.searchRes)
  return _internal_mutable_searchres();
}

// .ServiceDirectory.removeResponse removeRes = 6;
inline bool svcDirResponse::_internal_has_removeres() const {
  return function_case() == kRemoveRes;
}
inline bool svcDirResponse::has_removeres() const {
  return _internal_has_removeres();
}
inline void svcDirResponse::set_has_removeres() {
  _oneof_case_[0] = kRemoveRes;
}
inline void svcDirResponse::clear_removeres() {
  if (_internal_has_removeres()) {
    if (GetArena() == nullptr) {
      delete function_.removeres_;
    }
    clear_has_function();
  }
}
inline ::ServiceDirectory::removeResponse* svcDirResponse::release_removeres() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.svcDirResponse.removeRes)
  if (_internal_has_removeres()) {
    clear_has_function();
      ::ServiceDirectory::removeResponse* temp = function_.removeres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.removeres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServiceDirectory::removeResponse& svcDirResponse::_internal_removeres() const {
  return _internal_has_removeres()
      ? *function_.removeres_
      : *reinterpret_cast< ::ServiceDirectory::removeResponse*>(&::ServiceDirectory::_removeResponse_default_instance_);
}
inline const ::ServiceDirectory::removeResponse& svcDirResponse::removeres() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.svcDirResponse.removeRes)
  return _internal_removeres();
}
inline ::ServiceDirectory::removeResponse* svcDirResponse::unsafe_arena_release_removeres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.svcDirResponse.removeRes)
  if (_internal_has_removeres()) {
    clear_has_function();
    ::ServiceDirectory::removeResponse* temp = function_.removeres_;
    function_.removeres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void svcDirResponse::unsafe_arena_set_allocated_removeres(::ServiceDirectory::removeResponse* removeres) {
  clear_function();
  if (removeres) {
    set_has_removeres();
    function_.removeres_ = removeres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.svcDirResponse.removeRes)
}
inline ::ServiceDirectory::removeResponse* svcDirResponse::_internal_mutable_removeres() {
  if (!_internal_has_removeres()) {
    clear_function();
    set_has_removeres();
    function_.removeres_ = CreateMaybeMessage< ::ServiceDirectory::removeResponse >(GetArena());
  }
  return function_.removeres_;
}
inline ::ServiceDirectory::removeResponse* svcDirResponse::mutable_removeres() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.svcDirResponse.removeRes)
  return _internal_mutable_removeres();
}

inline bool svcDirResponse::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void svcDirResponse::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline svcDirResponse::FunctionCase svcDirResponse::function_case() const {
  return svcDirResponse::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerResponse

// bool status = 1;
inline void registerResponse::clear_status() {
  status_ = false;
}
inline bool registerResponse::_internal_status() const {
  return status_;
}
inline bool registerResponse::status() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.registerResponse.status)
  return _internal_status();
}
inline void registerResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void registerResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.registerResponse.status)
}

// -------------------------------------------------------------------

// removeResponse

// bool status = 1;
inline void removeResponse::clear_status() {
  status_ = false;
}
inline bool removeResponse::_internal_status() const {
  return status_;
}
inline bool removeResponse::status() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.removeResponse.status)
  return _internal_status();
}
inline void removeResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void removeResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.removeResponse.status)
}

// -------------------------------------------------------------------

// searchResponse

// bool status = 1;
inline void searchResponse::clear_status() {
  status_ = false;
}
inline bool searchResponse::_internal_status() const {
  return status_;
}
inline bool searchResponse::status() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.searchResponse.status)
  return _internal_status();
}
inline void searchResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void searchResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.searchResponse.status)
}

// string serverName = 2;
inline void searchResponse::clear_servername() {
  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& searchResponse::servername() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.searchResponse.serverName)
  return _internal_servername();
}
inline void searchResponse::set_servername(const std::string& value) {
  _internal_set_servername(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.searchResponse.serverName)
}
inline std::string* searchResponse::mutable_servername() {
  // @@protoc_insertion_point(field_mutable:ServiceDirectory.searchResponse.serverName)
  return _internal_mutable_servername();
}
inline const std::string& searchResponse::_internal_servername() const {
  return servername_.Get();
}
inline void searchResponse::_internal_set_servername(const std::string& value) {
  
  servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void searchResponse::set_servername(std::string&& value) {
  
  servername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ServiceDirectory.searchResponse.serverName)
}
inline void searchResponse::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ServiceDirectory.searchResponse.serverName)
}
inline void searchResponse::set_servername(const char* value,
    size_t size) {
  
  servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ServiceDirectory.searchResponse.serverName)
}
inline std::string* searchResponse::_internal_mutable_servername() {
  
  return servername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* searchResponse::release_servername() {
  // @@protoc_insertion_point(field_release:ServiceDirectory.searchResponse.serverName)
  return servername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void searchResponse::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.searchResponse.serverName)
}
inline std::string* searchResponse::unsafe_arena_release_servername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ServiceDirectory.searchResponse.serverName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return servername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void searchResponse::unsafe_arena_set_allocated_servername(
    std::string* servername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      servername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServiceDirectory.searchResponse.serverName)
}

// uint32 port = 3;
inline void searchResponse::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 searchResponse::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 searchResponse::port() const {
  // @@protoc_insertion_point(field_get:ServiceDirectory.searchResponse.port)
  return _internal_port();
}
inline void searchResponse::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void searchResponse::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ServiceDirectory.searchResponse.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServiceDirectory

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SvcDir_2eproto
