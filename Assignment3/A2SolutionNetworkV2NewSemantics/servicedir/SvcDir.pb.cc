// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SvcDir.proto

#include "SvcDir.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerRequest_SvcDir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerResponse_SvcDir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_removeRequest_SvcDir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_removeResponse_SvcDir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchRequest_SvcDir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SvcDir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchResponse_SvcDir_2eproto;
namespace ServiceDirectory {
class svcDirRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<svcDirRequest> _instance;
  const ::ServiceDirectory::registerRequest* registerargs_;
  const ::ServiceDirectory::searchRequest* searchargs_;
  const ::ServiceDirectory::removeRequest* removeargs_;
} _svcDirRequest_default_instance_;
class registerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<registerRequest> _instance;
} _registerRequest_default_instance_;
class searchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<searchRequest> _instance;
} _searchRequest_default_instance_;
class removeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<removeRequest> _instance;
} _removeRequest_default_instance_;
class svcDirResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<svcDirResponse> _instance;
  const ::ServiceDirectory::registerResponse* registerres_;
  const ::ServiceDirectory::searchResponse* searchres_;
  const ::ServiceDirectory::removeResponse* removeres_;
} _svcDirResponse_default_instance_;
class registerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<registerResponse> _instance;
} _registerResponse_default_instance_;
class removeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<removeResponse> _instance;
} _removeResponse_default_instance_;
class searchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<searchResponse> _instance;
} _searchResponse_default_instance_;
}  // namespace ServiceDirectory
static void InitDefaultsscc_info_registerRequest_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_registerRequest_default_instance_;
    new (ptr) ::ServiceDirectory::registerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::registerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerRequest_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_registerRequest_SvcDir_2eproto}, {}};

static void InitDefaultsscc_info_registerResponse_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_registerResponse_default_instance_;
    new (ptr) ::ServiceDirectory::registerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::registerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerResponse_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_registerResponse_SvcDir_2eproto}, {}};

static void InitDefaultsscc_info_removeRequest_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_removeRequest_default_instance_;
    new (ptr) ::ServiceDirectory::removeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::removeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_removeRequest_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_removeRequest_SvcDir_2eproto}, {}};

static void InitDefaultsscc_info_removeResponse_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_removeResponse_default_instance_;
    new (ptr) ::ServiceDirectory::removeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::removeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_removeResponse_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_removeResponse_SvcDir_2eproto}, {}};

static void InitDefaultsscc_info_searchRequest_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_searchRequest_default_instance_;
    new (ptr) ::ServiceDirectory::searchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::searchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchRequest_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_searchRequest_SvcDir_2eproto}, {}};

static void InitDefaultsscc_info_searchResponse_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_searchResponse_default_instance_;
    new (ptr) ::ServiceDirectory::searchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::searchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchResponse_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_searchResponse_SvcDir_2eproto}, {}};

static void InitDefaultsscc_info_svcDirRequest_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_svcDirRequest_default_instance_;
    new (ptr) ::ServiceDirectory::svcDirRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::svcDirRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_svcDirRequest_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_svcDirRequest_SvcDir_2eproto}, {
      &scc_info_registerRequest_SvcDir_2eproto.base,
      &scc_info_searchRequest_SvcDir_2eproto.base,
      &scc_info_removeRequest_SvcDir_2eproto.base,}};

static void InitDefaultsscc_info_svcDirResponse_SvcDir_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ServiceDirectory::_svcDirResponse_default_instance_;
    new (ptr) ::ServiceDirectory::svcDirResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServiceDirectory::svcDirResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_svcDirResponse_SvcDir_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_svcDirResponse_SvcDir_2eproto}, {
      &scc_info_registerResponse_SvcDir_2eproto.base,
      &scc_info_searchResponse_SvcDir_2eproto.base,
      &scc_info_removeResponse_SvcDir_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SvcDir_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SvcDir_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SvcDir_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SvcDir_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirRequest, magic_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirRequest, version_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirRequest, serial_),
  offsetof(::ServiceDirectory::svcDirRequestDefaultTypeInternal, registerargs_),
  offsetof(::ServiceDirectory::svcDirRequestDefaultTypeInternal, searchargs_),
  offsetof(::ServiceDirectory::svcDirRequestDefaultTypeInternal, removeargs_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirRequest, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::registerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::registerRequest, servicename_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::registerRequest, servername_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::registerRequest, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::searchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::searchRequest, servicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::removeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::removeRequest, servicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirResponse, magic_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirResponse, version_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirResponse, serial_),
  offsetof(::ServiceDirectory::svcDirResponseDefaultTypeInternal, registerres_),
  offsetof(::ServiceDirectory::svcDirResponseDefaultTypeInternal, searchres_),
  offsetof(::ServiceDirectory::svcDirResponseDefaultTypeInternal, removeres_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::svcDirResponse, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::registerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::registerResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::removeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::removeResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::searchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::searchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::searchResponse, servername_),
  PROTOBUF_FIELD_OFFSET(::ServiceDirectory::searchResponse, port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ServiceDirectory::svcDirRequest)},
  { 12, -1, sizeof(::ServiceDirectory::registerRequest)},
  { 20, -1, sizeof(::ServiceDirectory::searchRequest)},
  { 26, -1, sizeof(::ServiceDirectory::removeRequest)},
  { 32, -1, sizeof(::ServiceDirectory::svcDirResponse)},
  { 44, -1, sizeof(::ServiceDirectory::registerResponse)},
  { 50, -1, sizeof(::ServiceDirectory::removeResponse)},
  { 56, -1, sizeof(::ServiceDirectory::searchResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_svcDirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_registerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_searchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_removeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_svcDirResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_registerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_removeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ServiceDirectory::_searchResponse_default_instance_),
};

const char descriptor_table_protodef_SvcDir_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014SvcDir.proto\022\020ServiceDirectory\"\364\001\n\rsvc"
  "DirRequest\022\r\n\005magic\030\001 \001(\r\022\017\n\007version\030\002 \001"
  "(\r\022\016\n\006serial\030\003 \001(\r\0229\n\014registerArgs\030\004 \001(\013"
  "2!.ServiceDirectory.registerRequestH\000\0225\n"
  "\nsearchArgs\030\005 \001(\0132\037.ServiceDirectory.sea"
  "rchRequestH\000\0225\n\nremoveArgs\030\006 \001(\0132\037.Servi"
  "ceDirectory.removeRequestH\000B\n\n\010function\""
  "H\n\017registerRequest\022\023\n\013serviceName\030\001 \001(\t\022"
  "\022\n\nserverName\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\"$\n\rsea"
  "rchRequest\022\023\n\013serviceName\030\001 \001(\t\"$\n\rremov"
  "eRequest\022\023\n\013serviceName\030\001 \001(\t\"\365\001\n\016svcDir"
  "Response\022\r\n\005magic\030\001 \001(\r\022\017\n\007version\030\002 \001(\r"
  "\022\016\n\006serial\030\003 \001(\r\0229\n\013registerRes\030\004 \001(\0132\"."
  "ServiceDirectory.registerResponseH\000\0225\n\ts"
  "earchRes\030\005 \001(\0132 .ServiceDirectory.search"
  "ResponseH\000\0225\n\tremoveRes\030\006 \001(\0132 .ServiceD"
  "irectory.removeResponseH\000B\n\n\010function\"\"\n"
  "\020registerResponse\022\016\n\006status\030\001 \001(\010\" \n\016rem"
  "oveResponse\022\016\n\006status\030\001 \001(\010\"B\n\016searchRes"
  "ponse\022\016\n\006status\030\001 \001(\010\022\022\n\nserverName\030\002 \001("
  "\t\022\014\n\004port\030\003 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SvcDir_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SvcDir_2eproto_sccs[8] = {
  &scc_info_registerRequest_SvcDir_2eproto.base,
  &scc_info_registerResponse_SvcDir_2eproto.base,
  &scc_info_removeRequest_SvcDir_2eproto.base,
  &scc_info_removeResponse_SvcDir_2eproto.base,
  &scc_info_searchRequest_SvcDir_2eproto.base,
  &scc_info_searchResponse_SvcDir_2eproto.base,
  &scc_info_svcDirRequest_SvcDir_2eproto.base,
  &scc_info_svcDirResponse_SvcDir_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SvcDir_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SvcDir_2eproto = {
  false, false, descriptor_table_protodef_SvcDir_2eproto, "SvcDir.proto", 823,
  &descriptor_table_SvcDir_2eproto_once, descriptor_table_SvcDir_2eproto_sccs, descriptor_table_SvcDir_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_SvcDir_2eproto::offsets,
  file_level_metadata_SvcDir_2eproto, 8, file_level_enum_descriptors_SvcDir_2eproto, file_level_service_descriptors_SvcDir_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SvcDir_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SvcDir_2eproto)), true);
namespace ServiceDirectory {

// ===================================================================

void svcDirRequest::InitAsDefaultInstance() {
  ::ServiceDirectory::_svcDirRequest_default_instance_.registerargs_ = const_cast< ::ServiceDirectory::registerRequest*>(
      ::ServiceDirectory::registerRequest::internal_default_instance());
  ::ServiceDirectory::_svcDirRequest_default_instance_.searchargs_ = const_cast< ::ServiceDirectory::searchRequest*>(
      ::ServiceDirectory::searchRequest::internal_default_instance());
  ::ServiceDirectory::_svcDirRequest_default_instance_.removeargs_ = const_cast< ::ServiceDirectory::removeRequest*>(
      ::ServiceDirectory::removeRequest::internal_default_instance());
}
class svcDirRequest::_Internal {
 public:
  static const ::ServiceDirectory::registerRequest& registerargs(const svcDirRequest* msg);
  static const ::ServiceDirectory::searchRequest& searchargs(const svcDirRequest* msg);
  static const ::ServiceDirectory::removeRequest& removeargs(const svcDirRequest* msg);
};

const ::ServiceDirectory::registerRequest&
svcDirRequest::_Internal::registerargs(const svcDirRequest* msg) {
  return *msg->function_.registerargs_;
}
const ::ServiceDirectory::searchRequest&
svcDirRequest::_Internal::searchargs(const svcDirRequest* msg) {
  return *msg->function_.searchargs_;
}
const ::ServiceDirectory::removeRequest&
svcDirRequest::_Internal::removeargs(const svcDirRequest* msg) {
  return *msg->function_.removeargs_;
}
void svcDirRequest::set_allocated_registerargs(::ServiceDirectory::registerRequest* registerargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (registerargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(registerargs);
    if (message_arena != submessage_arena) {
      registerargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerargs, submessage_arena);
    }
    set_has_registerargs();
    function_.registerargs_ = registerargs;
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.svcDirRequest.registerArgs)
}
void svcDirRequest::set_allocated_searchargs(::ServiceDirectory::searchRequest* searchargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (searchargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchargs);
    if (message_arena != submessage_arena) {
      searchargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchargs, submessage_arena);
    }
    set_has_searchargs();
    function_.searchargs_ = searchargs;
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.svcDirRequest.searchArgs)
}
void svcDirRequest::set_allocated_removeargs(::ServiceDirectory::removeRequest* removeargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (removeargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(removeargs);
    if (message_arena != submessage_arena) {
      removeargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeargs, submessage_arena);
    }
    set_has_removeargs();
    function_.removeargs_ = removeargs;
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.svcDirRequest.removeArgs)
}
svcDirRequest::svcDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.svcDirRequest)
}
svcDirRequest::svcDirRequest(const svcDirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
  switch (from.function_case()) {
    case kRegisterArgs: {
      _internal_mutable_registerargs()->::ServiceDirectory::registerRequest::MergeFrom(from._internal_registerargs());
      break;
    }
    case kSearchArgs: {
      _internal_mutable_searchargs()->::ServiceDirectory::searchRequest::MergeFrom(from._internal_searchargs());
      break;
    }
    case kRemoveArgs: {
      _internal_mutable_removeargs()->::ServiceDirectory::removeRequest::MergeFrom(from._internal_removeargs());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.svcDirRequest)
}

void svcDirRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_svcDirRequest_SvcDir_2eproto.base);
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
}

svcDirRequest::~svcDirRequest() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.svcDirRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void svcDirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void svcDirRequest::ArenaDtor(void* object) {
  svcDirRequest* _this = reinterpret_cast< svcDirRequest* >(object);
  (void)_this;
}
void svcDirRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void svcDirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const svcDirRequest& svcDirRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_svcDirRequest_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void svcDirRequest::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:ServiceDirectory.svcDirRequest)
  switch (function_case()) {
    case kRegisterArgs: {
      if (GetArena() == nullptr) {
        delete function_.registerargs_;
      }
      break;
    }
    case kSearchArgs: {
      if (GetArena() == nullptr) {
        delete function_.searchargs_;
      }
      break;
    }
    case kRemoveArgs: {
      if (GetArena() == nullptr) {
        delete function_.removeargs_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void svcDirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.svcDirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* svcDirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceDirectory.registerRequest registerArgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceDirectory.searchRequest searchArgs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceDirectory.removeRequest removeArgs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* svcDirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.svcDirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  // .ServiceDirectory.registerRequest registerArgs = 4;
  if (_internal_has_registerargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::registerargs(this), target, stream);
  }

  // .ServiceDirectory.searchRequest searchArgs = 5;
  if (_internal_has_searchargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::searchargs(this), target, stream);
  }

  // .ServiceDirectory.removeRequest removeArgs = 6;
  if (_internal_has_removeargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::removeargs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.svcDirRequest)
  return target;
}

size_t svcDirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.svcDirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  switch (function_case()) {
    // .ServiceDirectory.registerRequest registerArgs = 4;
    case kRegisterArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.registerargs_);
      break;
    }
    // .ServiceDirectory.searchRequest searchArgs = 5;
    case kSearchArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.searchargs_);
      break;
    }
    // .ServiceDirectory.removeRequest removeArgs = 6;
    case kRemoveArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.removeargs_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void svcDirRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.svcDirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const svcDirRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<svcDirRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.svcDirRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.svcDirRequest)
    MergeFrom(*source);
  }
}

void svcDirRequest::MergeFrom(const svcDirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.svcDirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  switch (from.function_case()) {
    case kRegisterArgs: {
      _internal_mutable_registerargs()->::ServiceDirectory::registerRequest::MergeFrom(from._internal_registerargs());
      break;
    }
    case kSearchArgs: {
      _internal_mutable_searchargs()->::ServiceDirectory::searchRequest::MergeFrom(from._internal_searchargs());
      break;
    }
    case kRemoveArgs: {
      _internal_mutable_removeargs()->::ServiceDirectory::removeRequest::MergeFrom(from._internal_removeargs());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
}

void svcDirRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.svcDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void svcDirRequest::CopyFrom(const svcDirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.svcDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool svcDirRequest::IsInitialized() const {
  return true;
}

void svcDirRequest::InternalSwap(svcDirRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(svcDirRequest, serial_)
      + sizeof(svcDirRequest::serial_)
      - PROTOBUF_FIELD_OFFSET(svcDirRequest, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata svcDirRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void registerRequest::InitAsDefaultInstance() {
}
class registerRequest::_Internal {
 public:
};

registerRequest::registerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.registerRequest)
}
registerRequest::registerRequest(const registerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servicename(),
      GetArena());
  }
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servername().empty()) {
    servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servername(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.registerRequest)
}

void registerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_registerRequest_SvcDir_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

registerRequest::~registerRequest() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.registerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void registerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void registerRequest::ArenaDtor(void* object) {
  registerRequest* _this = reinterpret_cast< registerRequest* >(object);
  (void)_this;
}
void registerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const registerRequest& registerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_registerRequest_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void registerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.registerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServiceDirectory.registerRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServiceDirectory.registerRequest.serverName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.registerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceDirectory.registerRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  // string serverName = 2;
  if (this->servername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceDirectory.registerRequest.serverName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.registerRequest)
  return target;
}

size_t registerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.registerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string serverName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.registerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const registerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<registerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.registerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.registerRequest)
    MergeFrom(*source);
  }
}

void registerRequest::MergeFrom(const registerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.registerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
  if (from.servername().size() > 0) {
    _internal_set_servername(from._internal_servername());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void registerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.registerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerRequest::CopyFrom(const registerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.registerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerRequest::IsInitialized() const {
  return true;
}

void registerRequest::InternalSwap(registerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  servername_.Swap(&other->servername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void searchRequest::InitAsDefaultInstance() {
}
class searchRequest::_Internal {
 public:
};

searchRequest::searchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.searchRequest)
}
searchRequest::searchRequest(const searchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servicename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.searchRequest)
}

void searchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_searchRequest_SvcDir_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

searchRequest::~searchRequest() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.searchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void searchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchRequest::ArenaDtor(void* object) {
  searchRequest* _this = reinterpret_cast< searchRequest* >(object);
  (void)_this;
}
void searchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const searchRequest& searchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_searchRequest_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void searchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.searchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServiceDirectory.searchRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.searchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceDirectory.searchRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.searchRequest)
  return target;
}

size_t searchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.searchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void searchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.searchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const searchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<searchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.searchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.searchRequest)
    MergeFrom(*source);
  }
}

void searchRequest::MergeFrom(const searchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.searchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
}

void searchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.searchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void searchRequest::CopyFrom(const searchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.searchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchRequest::IsInitialized() const {
  return true;
}

void searchRequest::InternalSwap(searchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata searchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void removeRequest::InitAsDefaultInstance() {
}
class removeRequest::_Internal {
 public:
};

removeRequest::removeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.removeRequest)
}
removeRequest::removeRequest(const removeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servicename().empty()) {
    servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servicename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.removeRequest)
}

void removeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_removeRequest_SvcDir_2eproto.base);
  servicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

removeRequest::~removeRequest() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.removeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void removeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void removeRequest::ArenaDtor(void* object) {
  removeRequest* _this = reinterpret_cast< removeRequest* >(object);
  (void)_this;
}
void removeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void removeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const removeRequest& removeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_removeRequest_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void removeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.removeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* removeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServiceDirectory.removeRequest.serviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* removeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.removeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceDirectory.removeRequest.serviceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.removeRequest)
  return target;
}

size_t removeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.removeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceName = 1;
  if (this->servicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void removeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.removeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const removeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<removeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.removeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.removeRequest)
    MergeFrom(*source);
  }
}

void removeRequest::MergeFrom(const removeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.removeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servicename().size() > 0) {
    _internal_set_servicename(from._internal_servicename());
  }
}

void removeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.removeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void removeRequest::CopyFrom(const removeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.removeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool removeRequest::IsInitialized() const {
  return true;
}

void removeRequest::InternalSwap(removeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servicename_.Swap(&other->servicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata removeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void svcDirResponse::InitAsDefaultInstance() {
  ::ServiceDirectory::_svcDirResponse_default_instance_.registerres_ = const_cast< ::ServiceDirectory::registerResponse*>(
      ::ServiceDirectory::registerResponse::internal_default_instance());
  ::ServiceDirectory::_svcDirResponse_default_instance_.searchres_ = const_cast< ::ServiceDirectory::searchResponse*>(
      ::ServiceDirectory::searchResponse::internal_default_instance());
  ::ServiceDirectory::_svcDirResponse_default_instance_.removeres_ = const_cast< ::ServiceDirectory::removeResponse*>(
      ::ServiceDirectory::removeResponse::internal_default_instance());
}
class svcDirResponse::_Internal {
 public:
  static const ::ServiceDirectory::registerResponse& registerres(const svcDirResponse* msg);
  static const ::ServiceDirectory::searchResponse& searchres(const svcDirResponse* msg);
  static const ::ServiceDirectory::removeResponse& removeres(const svcDirResponse* msg);
};

const ::ServiceDirectory::registerResponse&
svcDirResponse::_Internal::registerres(const svcDirResponse* msg) {
  return *msg->function_.registerres_;
}
const ::ServiceDirectory::searchResponse&
svcDirResponse::_Internal::searchres(const svcDirResponse* msg) {
  return *msg->function_.searchres_;
}
const ::ServiceDirectory::removeResponse&
svcDirResponse::_Internal::removeres(const svcDirResponse* msg) {
  return *msg->function_.removeres_;
}
void svcDirResponse::set_allocated_registerres(::ServiceDirectory::registerResponse* registerres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (registerres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(registerres);
    if (message_arena != submessage_arena) {
      registerres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerres, submessage_arena);
    }
    set_has_registerres();
    function_.registerres_ = registerres;
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.svcDirResponse.registerRes)
}
void svcDirResponse::set_allocated_searchres(::ServiceDirectory::searchResponse* searchres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (searchres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchres);
    if (message_arena != submessage_arena) {
      searchres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchres, submessage_arena);
    }
    set_has_searchres();
    function_.searchres_ = searchres;
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.svcDirResponse.searchRes)
}
void svcDirResponse::set_allocated_removeres(::ServiceDirectory::removeResponse* removeres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (removeres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(removeres);
    if (message_arena != submessage_arena) {
      removeres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeres, submessage_arena);
    }
    set_has_removeres();
    function_.removeres_ = removeres;
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceDirectory.svcDirResponse.removeRes)
}
svcDirResponse::svcDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.svcDirResponse)
}
svcDirResponse::svcDirResponse(const svcDirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
  switch (from.function_case()) {
    case kRegisterRes: {
      _internal_mutable_registerres()->::ServiceDirectory::registerResponse::MergeFrom(from._internal_registerres());
      break;
    }
    case kSearchRes: {
      _internal_mutable_searchres()->::ServiceDirectory::searchResponse::MergeFrom(from._internal_searchres());
      break;
    }
    case kRemoveRes: {
      _internal_mutable_removeres()->::ServiceDirectory::removeResponse::MergeFrom(from._internal_removeres());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.svcDirResponse)
}

void svcDirResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_svcDirResponse_SvcDir_2eproto.base);
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
}

svcDirResponse::~svcDirResponse() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.svcDirResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void svcDirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void svcDirResponse::ArenaDtor(void* object) {
  svcDirResponse* _this = reinterpret_cast< svcDirResponse* >(object);
  (void)_this;
}
void svcDirResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void svcDirResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const svcDirResponse& svcDirResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_svcDirResponse_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void svcDirResponse::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:ServiceDirectory.svcDirResponse)
  switch (function_case()) {
    case kRegisterRes: {
      if (GetArena() == nullptr) {
        delete function_.registerres_;
      }
      break;
    }
    case kSearchRes: {
      if (GetArena() == nullptr) {
        delete function_.searchres_;
      }
      break;
    }
    case kRemoveRes: {
      if (GetArena() == nullptr) {
        delete function_.removeres_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void svcDirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.svcDirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* svcDirResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceDirectory.registerResponse registerRes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceDirectory.searchResponse searchRes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ServiceDirectory.removeResponse removeRes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_removeres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* svcDirResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.svcDirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  // .ServiceDirectory.registerResponse registerRes = 4;
  if (_internal_has_registerres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::registerres(this), target, stream);
  }

  // .ServiceDirectory.searchResponse searchRes = 5;
  if (_internal_has_searchres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::searchres(this), target, stream);
  }

  // .ServiceDirectory.removeResponse removeRes = 6;
  if (_internal_has_removeres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::removeres(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.svcDirResponse)
  return target;
}

size_t svcDirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.svcDirResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  switch (function_case()) {
    // .ServiceDirectory.registerResponse registerRes = 4;
    case kRegisterRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.registerres_);
      break;
    }
    // .ServiceDirectory.searchResponse searchRes = 5;
    case kSearchRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.searchres_);
      break;
    }
    // .ServiceDirectory.removeResponse removeRes = 6;
    case kRemoveRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.removeres_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void svcDirResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.svcDirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const svcDirResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<svcDirResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.svcDirResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.svcDirResponse)
    MergeFrom(*source);
  }
}

void svcDirResponse::MergeFrom(const svcDirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.svcDirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  switch (from.function_case()) {
    case kRegisterRes: {
      _internal_mutable_registerres()->::ServiceDirectory::registerResponse::MergeFrom(from._internal_registerres());
      break;
    }
    case kSearchRes: {
      _internal_mutable_searchres()->::ServiceDirectory::searchResponse::MergeFrom(from._internal_searchres());
      break;
    }
    case kRemoveRes: {
      _internal_mutable_removeres()->::ServiceDirectory::removeResponse::MergeFrom(from._internal_removeres());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
}

void svcDirResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.svcDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void svcDirResponse::CopyFrom(const svcDirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.svcDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool svcDirResponse::IsInitialized() const {
  return true;
}

void svcDirResponse::InternalSwap(svcDirResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(svcDirResponse, serial_)
      + sizeof(svcDirResponse::serial_)
      - PROTOBUF_FIELD_OFFSET(svcDirResponse, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata svcDirResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void registerResponse::InitAsDefaultInstance() {
}
class registerResponse::_Internal {
 public:
};

registerResponse::registerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.registerResponse)
}
registerResponse::registerResponse(const registerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.registerResponse)
}

void registerResponse::SharedCtor() {
  status_ = false;
}

registerResponse::~registerResponse() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.registerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void registerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void registerResponse::ArenaDtor(void* object) {
  registerResponse* _this = reinterpret_cast< registerResponse* >(object);
  (void)_this;
}
void registerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const registerResponse& registerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_registerResponse_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void registerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.registerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.registerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.registerResponse)
  return target;
}

size_t registerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.registerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.registerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const registerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<registerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.registerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.registerResponse)
    MergeFrom(*source);
  }
}

void registerResponse::MergeFrom(const registerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.registerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void registerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.registerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerResponse::CopyFrom(const registerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.registerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerResponse::IsInitialized() const {
  return true;
}

void registerResponse::InternalSwap(registerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void removeResponse::InitAsDefaultInstance() {
}
class removeResponse::_Internal {
 public:
};

removeResponse::removeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.removeResponse)
}
removeResponse::removeResponse(const removeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.removeResponse)
}

void removeResponse::SharedCtor() {
  status_ = false;
}

removeResponse::~removeResponse() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.removeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void removeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void removeResponse::ArenaDtor(void* object) {
  removeResponse* _this = reinterpret_cast< removeResponse* >(object);
  (void)_this;
}
void removeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void removeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const removeResponse& removeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_removeResponse_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void removeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.removeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* removeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* removeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.removeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.removeResponse)
  return target;
}

size_t removeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.removeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void removeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.removeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const removeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<removeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.removeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.removeResponse)
    MergeFrom(*source);
  }
}

void removeResponse::MergeFrom(const removeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.removeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void removeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.removeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void removeResponse::CopyFrom(const removeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.removeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool removeResponse::IsInitialized() const {
  return true;
}

void removeResponse::InternalSwap(removeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata removeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void searchResponse::InitAsDefaultInstance() {
}
class searchResponse::_Internal {
 public:
};

searchResponse::searchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceDirectory.searchResponse)
}
searchResponse::searchResponse(const searchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servername().empty()) {
    servername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servername(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&status_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:ServiceDirectory.searchResponse)
}

void searchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_searchResponse_SvcDir_2eproto.base);
  servername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&status_)) + sizeof(port_));
}

searchResponse::~searchResponse() {
  // @@protoc_insertion_point(destructor:ServiceDirectory.searchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void searchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchResponse::ArenaDtor(void* object) {
  searchResponse* _this = reinterpret_cast< searchResponse* >(object);
  (void)_this;
}
void searchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const searchResponse& searchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_searchResponse_SvcDir_2eproto.base);
  return *internal_default_instance();
}


void searchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceDirectory.searchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&status_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ServiceDirectory.searchResponse.serverName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServiceDirectory.searchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string serverName = 2;
  if (this->servername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServiceDirectory.searchResponse.serverName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceDirectory.searchResponse)
  return target;
}

size_t searchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServiceDirectory.searchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverName = 2;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void searchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServiceDirectory.searchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const searchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<searchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServiceDirectory.searchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServiceDirectory.searchResponse)
    MergeFrom(*source);
  }
}

void searchResponse::MergeFrom(const searchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServiceDirectory.searchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {
    _internal_set_servername(from._internal_servername());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void searchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServiceDirectory.searchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void searchResponse::CopyFrom(const searchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceDirectory.searchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchResponse::IsInitialized() const {
  return true;
}

void searchResponse::InternalSwap(searchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(searchResponse, port_)
      + sizeof(searchResponse::port_)
      - PROTOBUF_FIELD_OFFSET(searchResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata searchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ServiceDirectory
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServiceDirectory::svcDirRequest* Arena::CreateMaybeMessage< ::ServiceDirectory::svcDirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::svcDirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::registerRequest* Arena::CreateMaybeMessage< ::ServiceDirectory::registerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::registerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::searchRequest* Arena::CreateMaybeMessage< ::ServiceDirectory::searchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::searchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::removeRequest* Arena::CreateMaybeMessage< ::ServiceDirectory::removeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::removeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::svcDirResponse* Arena::CreateMaybeMessage< ::ServiceDirectory::svcDirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::svcDirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::registerResponse* Arena::CreateMaybeMessage< ::ServiceDirectory::registerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::registerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::removeResponse* Arena::CreateMaybeMessage< ::ServiceDirectory::removeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::removeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ServiceDirectory::searchResponse* Arena::CreateMaybeMessage< ::ServiceDirectory::searchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServiceDirectory::searchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
