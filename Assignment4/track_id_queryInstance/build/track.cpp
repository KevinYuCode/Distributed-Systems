/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/track_id_queryInstance/track.idl
  Source: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/track_id_queryInstance/build/track.cpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#include "/mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/track_id_queryInstance/build/track.hpp"

namespace Radar
{
std::ostream& operator<<(std::ostream& os, Track const& rhs)
{
  (void) rhs;
  os << "[";
  os << "id: " << rhs.id();
  os << ", timestamp: " << rhs.timestamp();
  os << ", strt_angle: " << rhs.strt_angle();
  os << ", end_angle: " << rhs.end_angle();
  os << ", distance: " << rhs.distance();
  os << "]";
  return os;
}

} //namespace Radar

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::Radar::Track>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, get_bit_bound<uint32_t>(), extensibility::ext_final, false));  //::id
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<uint64_t>(), extensibility::ext_final, false));  //::timestamp
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::strt_angle
  props.push_back(entity_properties_t(1, 3, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::end_angle
  props.push_back(entity_properties_t(1, 4, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::distance
  keylist.add_key_endpoint(std::list<uint32_t>{0});

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

