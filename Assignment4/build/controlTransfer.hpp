/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/controlTransfer.idl
  Source: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/build/controlTransfer.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX__MNT_C_USERS_YUKEV_DOCUMENTS_SCHOOL_4TH_YEAR_ELEC_477_MAIN_ASSIGNMENT4_BUILD_CONTROLTRANSFER_HPP_30906EA390429BA970CF80D4378A3D82
#define DDSCXX__MNT_C_USERS_YUKEV_DOCUMENTS_SCHOOL_4TH_YEAR_ELEC_477_MAIN_ASSIGNMENT4_BUILD_CONTROLTRANSFER_HPP_30906EA390429BA970CF80D4378A3D82

#include <utility>
#include <ostream>
#include <cstdint>
#include <string>

namespace ControlTransfer
{
enum class FlightZone
{
  AD,
  CENTRE};

std::ostream& operator<<(std::ostream& os, FlightZone const& rhs);

class Update
{
private:
 std::string callsign_;
 ::ControlTransfer::FlightZone to_ = ::ControlTransfer::FlightZone::AD;
 ::ControlTransfer::FlightZone from_ = ::ControlTransfer::FlightZone::AD;
 uint32_t timestamp_ = 0;

public:
  Update() = default;

  explicit Update(
    const std::string& callsign,
    ::ControlTransfer::FlightZone to,
    ::ControlTransfer::FlightZone from,
    uint32_t timestamp) :
    callsign_(callsign),
    to_(to),
    from_(from),
    timestamp_(timestamp) { }

  const std::string& callsign() const { return this->callsign_; }
  std::string& callsign() { return this->callsign_; }
  void callsign(const std::string& _val_) { this->callsign_ = _val_; }
  void callsign(std::string&& _val_) { this->callsign_ = std::move(_val_); }
  ::ControlTransfer::FlightZone to() const { return this->to_; }
  ::ControlTransfer::FlightZone& to() { return this->to_; }
  void to(::ControlTransfer::FlightZone _val_) { this->to_ = _val_; }
  ::ControlTransfer::FlightZone from() const { return this->from_; }
  ::ControlTransfer::FlightZone& from() { return this->from_; }
  void from(::ControlTransfer::FlightZone _val_) { this->from_ = _val_; }
  uint32_t timestamp() const { return this->timestamp_; }
  uint32_t& timestamp() { return this->timestamp_; }
  void timestamp(uint32_t _val_) { this->timestamp_ = _val_; }

  bool operator==(const Update& _other) const
  {
    (void) _other;
    return callsign_ == _other.callsign_ &&
      to_ == _other.to_ &&
      from_ == _other.from_ &&
      timestamp_ == _other.timestamp_;
  }

  bool operator!=(const Update& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, Update const& rhs);

} //namespace ControlTransfer

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::ControlTransfer::Update>::getTypeName()
{
  return "ControlTransfer::Update";
}

template <> constexpr bool TopicTraits<::ControlTransfer::Update>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::ControlTransfer::Update>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlTransfer::Update>::type_map_blob_sz() { return 636; }
template<> constexpr unsigned int TopicTraits<::ControlTransfer::Update>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::ControlTransfer::Update>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xda,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0x2f,  0xb8,  0x33,  0xc8,  0xad,  0x1e,  0x5a, 
 0xe6,  0xc9,  0x1a,  0x31,  0xaa,  0x3b,  0x50,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x81,  0x3a,  0xbe,  0x31, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xa5,  0xbc,  0x0b,  0x5c,  0x48, 
 0xb2,  0x5b,  0x95,  0x19,  0xda,  0x4e,  0x2e,  0xe9,  0xf6,  0x01,  0xb6,  0xe2,  0x03,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xa5,  0xbc,  0x0b,  0x5c,  0x48, 
 0xb2,  0x5b,  0x95,  0x19,  0xda,  0x4e,  0x2e,  0xe9,  0xf6,  0xd9,  0x8a,  0x07,  0xf8,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xd7,  0xe6,  0xd5,  0x5b,  0xf1, 
 0xa5,  0xbc,  0x0b,  0x5c,  0x48,  0xb2,  0x5b,  0x95,  0x19,  0xda,  0x4e,  0x2e,  0xe9,  0xf6,  0x00,  0x00, 
 0x3a,  0x00,  0x00,  0x00,  0xf1,  0x40,  0x01,  0x00,  0x02,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0xe1,  0x82,  0xeb,  0xbc,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x86,  0x1d,  0x9b,  0x36,  0x00,  0x00, 
 0x51,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0xa6,  0x87,  0x8e,  0x4b,  0x24,  0x08,  0x09, 
 0x59,  0xfd,  0x97,  0x0d,  0x89,  0xa3,  0xd1,  0x00,  0xb8,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x54,  0x72,  0x61,  0x6e,  0x73,  0x66,  0x65,  0x72,  0x3a,  0x3a,  0x55,  0x70,  0x64, 
 0x61,  0x74,  0x65,  0x00,  0x8c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x09,  0x00,  0x00,  0x00,  0x63,  0x61,  0x6c,  0x6c, 
 0x73,  0x69,  0x67,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xc5,  0xfa,  0x2d,  0xdd,  0xb4,  0x06,  0x56,  0x18,  0x3d,  0x42,  0x6c,  0x95,  0x48, 
 0x59,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x74,  0x6f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xc5,  0xfa,  0x2d,  0xdd,  0xb4, 
 0x06,  0x56,  0x18,  0x3d,  0x42,  0x6c,  0x95,  0x48,  0x59,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x6f,  0x6d,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x73,  0x74,  0x61,  0x6d, 
 0x70,  0x00,  0x00,  0x00,  0xf2,  0xc5,  0xfa,  0x2d,  0xdd,  0xb4,  0x06,  0x56,  0x18,  0x3d,  0x42,  0x6c, 
 0x95,  0x48,  0x59,  0x00,  0x6d,  0x00,  0x00,  0x00,  0xf2,  0x40,  0x01,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74,  0x72,  0x6f,  0x6c,  0x54, 
 0x72,  0x61,  0x6e,  0x73,  0x66,  0x65,  0x72,  0x3a,  0x3a,  0x46,  0x6c,  0x69,  0x67,  0x68,  0x74,  0x5a, 
 0x6f,  0x6e,  0x65,  0x00,  0x3d,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x41,  0x44,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x43,  0x45,  0x4e,  0x54, 
 0x52,  0x45,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0xf2,  0xa6,  0x87,  0x8e,  0x4b,  0x24,  0x08,  0x09,  0x59,  0xfd,  0x97,  0x0d,  0x89,  0xa3,  0xd1,  0xf1, 
 0x2f,  0xb8,  0x33,  0xc8,  0xad,  0x1e,  0x5a,  0xe6,  0xc9,  0x1a,  0x31,  0xaa,  0x3b,  0x50,  0xf2,  0xc5, 
 0xfa,  0x2d,  0xdd,  0xb4,  0x06,  0x56,  0x18,  0x3d,  0x42,  0x6c,  0x95,  0x48,  0x59,  0xf1,  0xa5,  0xbc, 
 0x0b,  0x5c,  0x48,  0xb2,  0x5b,  0x95,  0x19,  0xda,  0x4e,  0x2e,  0xe9,  0xf6, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlTransfer::Update>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2f,  0xb8,  0x33,  0xc8,  0xad,  0x1e,  0x5a,  0xe6,  0xc9,  0x1a,  0x31, 
 0xaa,  0x3b,  0x50,  0x00,  0x77,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xa5,  0xbc,  0x0b,  0x5c,  0x48,  0xb2,  0x5b, 
 0x95,  0x19,  0xda,  0x4e,  0x2e,  0xe9,  0xf6,  0x00,  0x3e,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xa6,  0x87,  0x8e, 
 0x4b,  0x24,  0x08,  0x09,  0x59,  0xfd,  0x97,  0x0d,  0x89,  0xa3,  0xd1,  0x00,  0xbc,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xc5,  0xfa,  0x2d,  0xdd,  0xb4,  0x06,  0x56,  0x18,  0x3d,  0x42,  0x6c,  0x95,  0x48,  0x59,  0x00, 
 0x71,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::ControlTransfer::Update>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlTransfer::Update>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::ControlTransfer::Update)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
::ControlTransfer::FlightZone enum_conversion<::ControlTransfer::FlightZone>(uint32_t in);

template<>
const propvec &get_type_props<::ControlTransfer::Update>();

namespace {
  static const volatile propvec &properties___ControlTransfer__Update = get_type_props<::ControlTransfer::Update>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlTransfer::Update& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.to()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.from()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlTransfer::Update& instance, key_mode key) {
  const auto &props = get_type_props<::ControlTransfer::Update>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlTransfer::Update& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.to()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.from()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlTransfer::Update& instance, key_mode key) {
  const auto &props = get_type_props<::ControlTransfer::Update>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlTransfer::Update& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.to()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.from()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlTransfer::Update& instance, key_mode key) {
  const auto &props = get_type_props<::ControlTransfer::Update>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlTransfer::Update& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.callsign(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.to()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.from()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.timestamp()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlTransfer::Update& instance, key_mode key) {
  const auto &props = get_type_props<::ControlTransfer::Update>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX__MNT_C_USERS_YUKEV_DOCUMENTS_SCHOOL_4TH_YEAR_ELEC_477_MAIN_ASSIGNMENT4_BUILD_CONTROLTRANSFER_HPP_30906EA390429BA970CF80D4378A3D82
