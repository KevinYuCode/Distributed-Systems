/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/controlTransfer.idl
  Source: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/build/controlTransfer.cpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#include "/mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/build/controlTransfer.hpp"

namespace ControlTransfer
{
std::ostream& operator<<(std::ostream& os, FlightZone const& rhs)
{
  (void) rhs;
  switch (rhs)
  {
    case FlightZone::AD:
      os << "FlightZone::AD"; break;
    case FlightZone::CENTRE:
      os << "FlightZone::CENTRE"; break;
    default: break;
  }
  return os;
}

std::ostream& operator<<(std::ostream& os, Update const& rhs)
{
  (void) rhs;
  os << "[";
  os << "callsign: " << rhs.callsign();
  os << ", to: " << rhs.to();
  os << ", from: " << rhs.from();
  os << ", timestamp: " << rhs.timestamp();
  os << "]";
  return os;
}

} //namespace ControlTransfer

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
::ControlTransfer::FlightZone enum_conversion<::ControlTransfer::FlightZone>(uint32_t in) {
  switch (in) {
    default:
    case 0:
    return ::ControlTransfer::FlightZone::AD;
    break;
    case 1:
    return ::ControlTransfer::FlightZone::CENTRE;
    break;
  }
}

template<>
const propvec &get_type_props<::ControlTransfer::Update>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::callsign
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<::ControlTransfer::FlightZone>(), extensibility::ext_final, false));  //::to
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<::ControlTransfer::FlightZone>(), extensibility::ext_final, false));  //::from
  props.push_back(entity_properties_t(1, 3, false, get_bit_bound<uint32_t>(), extensibility::ext_final, false));  //::timestamp

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

