/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/statekey.idl
  Source: /mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/build/statekey.cpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#include "/mnt/c/Users/yukev/Documents/School/4th Year/ELEC_477/Main/Assignment4/build/statekey.hpp"

namespace State
{
std::ostream& operator<<(std::ostream& os, Update const& rhs)
{
  (void) rhs;
  os << "[";
  os << "icao24: " << rhs.icao24();
  os << ", timestamp: " << rhs.timestamp();
  os << ", lat: " << rhs.lat();
  os << ", lon: " << rhs.lon();
  os << ", velocity: " << rhs.velocity();
  os << ", heading: " << rhs.heading();
  os << ", vertrate: " << rhs.vertrate();
  os << ", callsign: " << rhs.callsign();
  os << ", squawk: " << rhs.squawk();
  os << ", baroaltitude: " << rhs.baroaltitude();
  os << ", geoaltitude: " << rhs.geoaltitude();
  os << "]";
  return os;
}

} //namespace State

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::State::Update>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::icao24
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<uint32_t>(), extensibility::ext_final, false));  //::timestamp
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::lat
  props.push_back(entity_properties_t(1, 3, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::lon
  props.push_back(entity_properties_t(1, 4, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::velocity
  props.push_back(entity_properties_t(1, 5, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::heading
  props.push_back(entity_properties_t(1, 6, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::vertrate
  props.push_back(entity_properties_t(1, 7, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::callsign
  props.push_back(entity_properties_t(1, 8, false, get_bit_bound<uint32_t>(), extensibility::ext_final, false));  //::squawk
  props.push_back(entity_properties_t(1, 9, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::baroaltitude
  props.push_back(entity_properties_t(1, 10, false, get_bit_bound<float>(), extensibility::ext_final, false));  //::geoaltitude
  keylist.add_key_endpoint(std::list<uint32_t>{7});

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

