// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace Data {
class get_request;
class get_requestDefaultTypeInternal;
extern get_requestDefaultTypeInternal _get_request_default_instance_;
class get_response;
class get_responseDefaultTypeInternal;
extern get_responseDefaultTypeInternal _get_response_default_instance_;
class key_value_message;
class key_value_messageDefaultTypeInternal;
extern key_value_messageDefaultTypeInternal _key_value_message_default_instance_;
class message_header;
class message_headerDefaultTypeInternal;
extern message_headerDefaultTypeInternal _message_header_default_instance_;
class put_request;
class put_requestDefaultTypeInternal;
extern put_requestDefaultTypeInternal _put_request_default_instance_;
class put_response;
class put_responseDefaultTypeInternal;
extern put_responseDefaultTypeInternal _put_response_default_instance_;
}  // namespace Data
PROTOBUF_NAMESPACE_OPEN
template<> ::Data::get_request* Arena::CreateMaybeMessage<::Data::get_request>(Arena*);
template<> ::Data::get_response* Arena::CreateMaybeMessage<::Data::get_response>(Arena*);
template<> ::Data::key_value_message* Arena::CreateMaybeMessage<::Data::key_value_message>(Arena*);
template<> ::Data::message_header* Arena::CreateMaybeMessage<::Data::message_header>(Arena*);
template<> ::Data::put_request* Arena::CreateMaybeMessage<::Data::put_request>(Arena*);
template<> ::Data::put_response* Arena::CreateMaybeMessage<::Data::put_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Data {

// ===================================================================

class message_header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.message_header) */ {
 public:
  inline message_header() : message_header(nullptr) {};
  virtual ~message_header();

  message_header(const message_header& from);
  message_header(message_header&& from) noexcept
    : message_header() {
    *this = ::std::move(from);
  }

  inline message_header& operator=(const message_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline message_header& operator=(message_header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const message_header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const message_header* internal_default_instance() {
    return reinterpret_cast<const message_header*>(
               &_message_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(message_header& a, message_header& b) {
    a.Swap(&b);
  }
  inline void Swap(message_header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(message_header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline message_header* New() const final {
    return CreateMaybeMessage<message_header>(nullptr);
  }

  message_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<message_header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const message_header& from);
  void MergeFrom(const message_header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(message_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.message_header";
  }
  protected:
  explicit message_header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicNumberFieldNumber = 1,
    kVersionFieldNumber = 2,
    kMessageIdFieldNumber = 3,
  };
  // uint32 magic_number = 1;
  void clear_magic_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_number() const;
  void set_magic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic_number() const;
  void _internal_set_magic_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 message_id = 3;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data.message_header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class put_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.put_request) */ {
 public:
  inline put_request() : put_request(nullptr) {};
  virtual ~put_request();

  put_request(const put_request& from);
  put_request(put_request&& from) noexcept
    : put_request() {
    *this = ::std::move(from);
  }

  inline put_request& operator=(const put_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline put_request& operator=(put_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const put_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const put_request* internal_default_instance() {
    return reinterpret_cast<const put_request*>(
               &_put_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(put_request& a, put_request& b) {
    a.Swap(&b);
  }
  inline void Swap(put_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(put_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline put_request* New() const final {
    return CreateMaybeMessage<put_request>(nullptr);
  }

  put_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<put_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const put_request& from);
  void MergeFrom(const put_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(put_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.put_request";
  }
  protected:
  explicit put_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 key = 2;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data.put_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class put_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.put_response) */ {
 public:
  inline put_response() : put_response(nullptr) {};
  virtual ~put_response();

  put_response(const put_response& from);
  put_response(put_response&& from) noexcept
    : put_response() {
    *this = ::std::move(from);
  }

  inline put_response& operator=(const put_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline put_response& operator=(put_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const put_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const put_response* internal_default_instance() {
    return reinterpret_cast<const put_response*>(
               &_put_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(put_response& a, put_response& b) {
    a.Swap(&b);
  }
  inline void Swap(put_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(put_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline put_response* New() const final {
    return CreateMaybeMessage<put_response>(nullptr);
  }

  put_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<put_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const put_response& from);
  void MergeFrom(const put_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(put_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.put_response";
  }
  protected:
  explicit put_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Data.put_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class get_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.get_request) */ {
 public:
  inline get_request() : get_request(nullptr) {};
  virtual ~get_request();

  get_request(const get_request& from);
  get_request(get_request&& from) noexcept
    : get_request() {
    *this = ::std::move(from);
  }

  inline get_request& operator=(const get_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_request& operator=(get_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_request* internal_default_instance() {
    return reinterpret_cast<const get_request*>(
               &_get_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(get_request& a, get_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_request* New() const final {
    return CreateMaybeMessage<get_request>(nullptr);
  }

  get_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_request& from);
  void MergeFrom(const get_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.get_request";
  }
  protected:
  explicit get_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // uint32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data.get_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class get_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.get_response) */ {
 public:
  inline get_response() : get_response(nullptr) {};
  virtual ~get_response();

  get_response(const get_response& from);
  get_response(get_response&& from) noexcept
    : get_response() {
    *this = ::std::move(from);
  }

  inline get_response& operator=(const get_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_response& operator=(get_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_response* internal_default_instance() {
    return reinterpret_cast<const get_response*>(
               &_get_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(get_response& a, get_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_response* New() const final {
    return CreateMaybeMessage<get_response>(nullptr);
  }

  get_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_response& from);
  void MergeFrom(const get_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.get_response";
  }
  protected:
  explicit get_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
    kValueLengthFieldNumber = 3,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // uint32 value_length = 3;
  void clear_value_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_length() const;
  void set_value_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value_length() const;
  void _internal_set_value_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Data.get_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class key_value_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Data.key_value_message) */ {
 public:
  inline key_value_message() : key_value_message(nullptr) {};
  virtual ~key_value_message();

  key_value_message(const key_value_message& from);
  key_value_message(key_value_message&& from) noexcept
    : key_value_message() {
    *this = ::std::move(from);
  }

  inline key_value_message& operator=(const key_value_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline key_value_message& operator=(key_value_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const key_value_message& default_instance();

  enum PayloadCase {
    kPutRequest = 2,
    kPutResponse = 3,
    kGetRequest = 4,
    kGetResponse = 5,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const key_value_message* internal_default_instance() {
    return reinterpret_cast<const key_value_message*>(
               &_key_value_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(key_value_message& a, key_value_message& b) {
    a.Swap(&b);
  }
  inline void Swap(key_value_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(key_value_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline key_value_message* New() const final {
    return CreateMaybeMessage<key_value_message>(nullptr);
  }

  key_value_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<key_value_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const key_value_message& from);
  void MergeFrom(const key_value_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(key_value_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Data.key_value_message";
  }
  protected:
  explicit key_value_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2eproto);
    return ::descriptor_table_data_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPutRequestFieldNumber = 2,
    kPutResponseFieldNumber = 3,
    kGetRequestFieldNumber = 4,
    kGetResponseFieldNumber = 5,
  };
  // .Data.message_header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Data::message_header& header() const;
  ::Data::message_header* release_header();
  ::Data::message_header* mutable_header();
  void set_allocated_header(::Data::message_header* header);
  private:
  const ::Data::message_header& _internal_header() const;
  ::Data::message_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Data::message_header* header);
  ::Data::message_header* unsafe_arena_release_header();

  // .Data.put_request put_request = 2;
  bool has_put_request() const;
  private:
  bool _internal_has_put_request() const;
  public:
  void clear_put_request();
  const ::Data::put_request& put_request() const;
  ::Data::put_request* release_put_request();
  ::Data::put_request* mutable_put_request();
  void set_allocated_put_request(::Data::put_request* put_request);
  private:
  const ::Data::put_request& _internal_put_request() const;
  ::Data::put_request* _internal_mutable_put_request();
  public:
  void unsafe_arena_set_allocated_put_request(
      ::Data::put_request* put_request);
  ::Data::put_request* unsafe_arena_release_put_request();

  // .Data.put_response put_response = 3;
  bool has_put_response() const;
  private:
  bool _internal_has_put_response() const;
  public:
  void clear_put_response();
  const ::Data::put_response& put_response() const;
  ::Data::put_response* release_put_response();
  ::Data::put_response* mutable_put_response();
  void set_allocated_put_response(::Data::put_response* put_response);
  private:
  const ::Data::put_response& _internal_put_response() const;
  ::Data::put_response* _internal_mutable_put_response();
  public:
  void unsafe_arena_set_allocated_put_response(
      ::Data::put_response* put_response);
  ::Data::put_response* unsafe_arena_release_put_response();

  // .Data.get_request get_request = 4;
  bool has_get_request() const;
  private:
  bool _internal_has_get_request() const;
  public:
  void clear_get_request();
  const ::Data::get_request& get_request() const;
  ::Data::get_request* release_get_request();
  ::Data::get_request* mutable_get_request();
  void set_allocated_get_request(::Data::get_request* get_request);
  private:
  const ::Data::get_request& _internal_get_request() const;
  ::Data::get_request* _internal_mutable_get_request();
  public:
  void unsafe_arena_set_allocated_get_request(
      ::Data::get_request* get_request);
  ::Data::get_request* unsafe_arena_release_get_request();

  // .Data.get_response get_response = 5;
  bool has_get_response() const;
  private:
  bool _internal_has_get_response() const;
  public:
  void clear_get_response();
  const ::Data::get_response& get_response() const;
  ::Data::get_response* release_get_response();
  ::Data::get_response* mutable_get_response();
  void set_allocated_get_response(::Data::get_response* get_response);
  private:
  const ::Data::get_response& _internal_get_response() const;
  ::Data::get_response* _internal_mutable_get_response();
  public:
  void unsafe_arena_set_allocated_get_response(
      ::Data::get_response* get_response);
  ::Data::get_response* unsafe_arena_release_get_response();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Data.key_value_message)
 private:
  class _Internal;
  void set_has_put_request();
  void set_has_put_response();
  void set_has_get_request();
  void set_has_get_response();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Data::message_header* header_;
  union PayloadUnion {
    PayloadUnion() {}
    ::Data::put_request* put_request_;
    ::Data::put_response* put_response_;
    ::Data::get_request* get_request_;
    ::Data::get_response* get_response_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// message_header

// uint32 magic_number = 1;
inline void message_header::clear_magic_number() {
  magic_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 message_header::_internal_magic_number() const {
  return magic_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 message_header::magic_number() const {
  // @@protoc_insertion_point(field_get:Data.message_header.magic_number)
  return _internal_magic_number();
}
inline void message_header::_internal_set_magic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_number_ = value;
}
inline void message_header::set_magic_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic_number(value);
  // @@protoc_insertion_point(field_set:Data.message_header.magic_number)
}

// uint32 version = 2;
inline void message_header::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 message_header::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 message_header::version() const {
  // @@protoc_insertion_point(field_get:Data.message_header.version)
  return _internal_version();
}
inline void message_header::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void message_header::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Data.message_header.version)
}

// uint32 message_id = 3;
inline void message_header::clear_message_id() {
  message_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 message_header::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 message_header::message_id() const {
  // @@protoc_insertion_point(field_get:Data.message_header.message_id)
  return _internal_message_id();
}
inline void message_header::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  message_id_ = value;
}
inline void message_header::set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:Data.message_header.message_id)
}

// -------------------------------------------------------------------

// put_request

// bytes value = 1;
inline void put_request::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& put_request::value() const {
  // @@protoc_insertion_point(field_get:Data.put_request.value)
  return _internal_value();
}
inline void put_request::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Data.put_request.value)
}
inline std::string* put_request::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Data.put_request.value)
  return _internal_mutable_value();
}
inline const std::string& put_request::_internal_value() const {
  return value_.Get();
}
inline void put_request::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void put_request::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Data.put_request.value)
}
inline void put_request::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Data.put_request.value)
}
inline void put_request::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Data.put_request.value)
}
inline std::string* put_request::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* put_request::release_value() {
  // @@protoc_insertion_point(field_release:Data.put_request.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void put_request::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Data.put_request.value)
}
inline std::string* put_request::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Data.put_request.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void put_request::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.put_request.value)
}

// uint32 key = 2;
inline void put_request::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 put_request::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 put_request::key() const {
  // @@protoc_insertion_point(field_get:Data.put_request.key)
  return _internal_key();
}
inline void put_request::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void put_request::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Data.put_request.key)
}

// -------------------------------------------------------------------

// put_response

// bool success = 1;
inline void put_response::clear_success() {
  success_ = false;
}
inline bool put_response::_internal_success() const {
  return success_;
}
inline bool put_response::success() const {
  // @@protoc_insertion_point(field_get:Data.put_response.success)
  return _internal_success();
}
inline void put_response::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void put_response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Data.put_response.success)
}

// -------------------------------------------------------------------

// get_request

// uint32 key = 1;
inline void get_request::clear_key() {
  key_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_request::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_request::key() const {
  // @@protoc_insertion_point(field_get:Data.get_request.key)
  return _internal_key();
}
inline void get_request::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  key_ = value;
}
inline void get_request::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Data.get_request.key)
}

// -------------------------------------------------------------------

// get_response

// bool status = 1;
inline void get_response::clear_status() {
  status_ = false;
}
inline bool get_response::_internal_status() const {
  return status_;
}
inline bool get_response::status() const {
  // @@protoc_insertion_point(field_get:Data.get_response.status)
  return _internal_status();
}
inline void get_response::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void get_response::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Data.get_response.status)
}

// bytes value = 2;
inline void get_response::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& get_response::value() const {
  // @@protoc_insertion_point(field_get:Data.get_response.value)
  return _internal_value();
}
inline void get_response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Data.get_response.value)
}
inline std::string* get_response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Data.get_response.value)
  return _internal_mutable_value();
}
inline const std::string& get_response::_internal_value() const {
  return value_.Get();
}
inline void get_response::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void get_response::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Data.get_response.value)
}
inline void get_response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Data.get_response.value)
}
inline void get_response::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Data.get_response.value)
}
inline std::string* get_response::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* get_response::release_value() {
  // @@protoc_insertion_point(field_release:Data.get_response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Data.get_response.value)
}
inline std::string* get_response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Data.get_response.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void get_response::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.get_response.value)
}

// uint32 value_length = 3;
inline void get_response::clear_value_length() {
  value_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_response::_internal_value_length() const {
  return value_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_response::value_length() const {
  // @@protoc_insertion_point(field_get:Data.get_response.value_length)
  return _internal_value_length();
}
inline void get_response::_internal_set_value_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_length_ = value;
}
inline void get_response::set_value_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value_length(value);
  // @@protoc_insertion_point(field_set:Data.get_response.value_length)
}

// -------------------------------------------------------------------

// key_value_message

// .Data.message_header header = 1;
inline bool key_value_message::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool key_value_message::has_header() const {
  return _internal_has_header();
}
inline void key_value_message::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Data::message_header& key_value_message::_internal_header() const {
  const ::Data::message_header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Data::message_header*>(
      &::Data::_message_header_default_instance_);
}
inline const ::Data::message_header& key_value_message::header() const {
  // @@protoc_insertion_point(field_get:Data.key_value_message.header)
  return _internal_header();
}
inline void key_value_message::unsafe_arena_set_allocated_header(
    ::Data::message_header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.key_value_message.header)
}
inline ::Data::message_header* key_value_message::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Data::message_header* key_value_message::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Data.key_value_message.header)
  
  ::Data::message_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Data::message_header* key_value_message::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Data::message_header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::Data::message_header* key_value_message::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Data.key_value_message.header)
  return _internal_mutable_header();
}
inline void key_value_message::set_allocated_header(::Data::message_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Data.key_value_message.header)
}

// .Data.put_request put_request = 2;
inline bool key_value_message::_internal_has_put_request() const {
  return payload_case() == kPutRequest;
}
inline bool key_value_message::has_put_request() const {
  return _internal_has_put_request();
}
inline void key_value_message::set_has_put_request() {
  _oneof_case_[0] = kPutRequest;
}
inline void key_value_message::clear_put_request() {
  if (_internal_has_put_request()) {
    if (GetArena() == nullptr) {
      delete payload_.put_request_;
    }
    clear_has_payload();
  }
}
inline ::Data::put_request* key_value_message::release_put_request() {
  // @@protoc_insertion_point(field_release:Data.key_value_message.put_request)
  if (_internal_has_put_request()) {
    clear_has_payload();
      ::Data::put_request* temp = payload_.put_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.put_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Data::put_request& key_value_message::_internal_put_request() const {
  return _internal_has_put_request()
      ? *payload_.put_request_
      : *reinterpret_cast< ::Data::put_request*>(&::Data::_put_request_default_instance_);
}
inline const ::Data::put_request& key_value_message::put_request() const {
  // @@protoc_insertion_point(field_get:Data.key_value_message.put_request)
  return _internal_put_request();
}
inline ::Data::put_request* key_value_message::unsafe_arena_release_put_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Data.key_value_message.put_request)
  if (_internal_has_put_request()) {
    clear_has_payload();
    ::Data::put_request* temp = payload_.put_request_;
    payload_.put_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void key_value_message::unsafe_arena_set_allocated_put_request(::Data::put_request* put_request) {
  clear_payload();
  if (put_request) {
    set_has_put_request();
    payload_.put_request_ = put_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.key_value_message.put_request)
}
inline ::Data::put_request* key_value_message::_internal_mutable_put_request() {
  if (!_internal_has_put_request()) {
    clear_payload();
    set_has_put_request();
    payload_.put_request_ = CreateMaybeMessage< ::Data::put_request >(GetArena());
  }
  return payload_.put_request_;
}
inline ::Data::put_request* key_value_message::mutable_put_request() {
  // @@protoc_insertion_point(field_mutable:Data.key_value_message.put_request)
  return _internal_mutable_put_request();
}

// .Data.put_response put_response = 3;
inline bool key_value_message::_internal_has_put_response() const {
  return payload_case() == kPutResponse;
}
inline bool key_value_message::has_put_response() const {
  return _internal_has_put_response();
}
inline void key_value_message::set_has_put_response() {
  _oneof_case_[0] = kPutResponse;
}
inline void key_value_message::clear_put_response() {
  if (_internal_has_put_response()) {
    if (GetArena() == nullptr) {
      delete payload_.put_response_;
    }
    clear_has_payload();
  }
}
inline ::Data::put_response* key_value_message::release_put_response() {
  // @@protoc_insertion_point(field_release:Data.key_value_message.put_response)
  if (_internal_has_put_response()) {
    clear_has_payload();
      ::Data::put_response* temp = payload_.put_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.put_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Data::put_response& key_value_message::_internal_put_response() const {
  return _internal_has_put_response()
      ? *payload_.put_response_
      : *reinterpret_cast< ::Data::put_response*>(&::Data::_put_response_default_instance_);
}
inline const ::Data::put_response& key_value_message::put_response() const {
  // @@protoc_insertion_point(field_get:Data.key_value_message.put_response)
  return _internal_put_response();
}
inline ::Data::put_response* key_value_message::unsafe_arena_release_put_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Data.key_value_message.put_response)
  if (_internal_has_put_response()) {
    clear_has_payload();
    ::Data::put_response* temp = payload_.put_response_;
    payload_.put_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void key_value_message::unsafe_arena_set_allocated_put_response(::Data::put_response* put_response) {
  clear_payload();
  if (put_response) {
    set_has_put_response();
    payload_.put_response_ = put_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.key_value_message.put_response)
}
inline ::Data::put_response* key_value_message::_internal_mutable_put_response() {
  if (!_internal_has_put_response()) {
    clear_payload();
    set_has_put_response();
    payload_.put_response_ = CreateMaybeMessage< ::Data::put_response >(GetArena());
  }
  return payload_.put_response_;
}
inline ::Data::put_response* key_value_message::mutable_put_response() {
  // @@protoc_insertion_point(field_mutable:Data.key_value_message.put_response)
  return _internal_mutable_put_response();
}

// .Data.get_request get_request = 4;
inline bool key_value_message::_internal_has_get_request() const {
  return payload_case() == kGetRequest;
}
inline bool key_value_message::has_get_request() const {
  return _internal_has_get_request();
}
inline void key_value_message::set_has_get_request() {
  _oneof_case_[0] = kGetRequest;
}
inline void key_value_message::clear_get_request() {
  if (_internal_has_get_request()) {
    if (GetArena() == nullptr) {
      delete payload_.get_request_;
    }
    clear_has_payload();
  }
}
inline ::Data::get_request* key_value_message::release_get_request() {
  // @@protoc_insertion_point(field_release:Data.key_value_message.get_request)
  if (_internal_has_get_request()) {
    clear_has_payload();
      ::Data::get_request* temp = payload_.get_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.get_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Data::get_request& key_value_message::_internal_get_request() const {
  return _internal_has_get_request()
      ? *payload_.get_request_
      : *reinterpret_cast< ::Data::get_request*>(&::Data::_get_request_default_instance_);
}
inline const ::Data::get_request& key_value_message::get_request() const {
  // @@protoc_insertion_point(field_get:Data.key_value_message.get_request)
  return _internal_get_request();
}
inline ::Data::get_request* key_value_message::unsafe_arena_release_get_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Data.key_value_message.get_request)
  if (_internal_has_get_request()) {
    clear_has_payload();
    ::Data::get_request* temp = payload_.get_request_;
    payload_.get_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void key_value_message::unsafe_arena_set_allocated_get_request(::Data::get_request* get_request) {
  clear_payload();
  if (get_request) {
    set_has_get_request();
    payload_.get_request_ = get_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.key_value_message.get_request)
}
inline ::Data::get_request* key_value_message::_internal_mutable_get_request() {
  if (!_internal_has_get_request()) {
    clear_payload();
    set_has_get_request();
    payload_.get_request_ = CreateMaybeMessage< ::Data::get_request >(GetArena());
  }
  return payload_.get_request_;
}
inline ::Data::get_request* key_value_message::mutable_get_request() {
  // @@protoc_insertion_point(field_mutable:Data.key_value_message.get_request)
  return _internal_mutable_get_request();
}

// .Data.get_response get_response = 5;
inline bool key_value_message::_internal_has_get_response() const {
  return payload_case() == kGetResponse;
}
inline bool key_value_message::has_get_response() const {
  return _internal_has_get_response();
}
inline void key_value_message::set_has_get_response() {
  _oneof_case_[0] = kGetResponse;
}
inline void key_value_message::clear_get_response() {
  if (_internal_has_get_response()) {
    if (GetArena() == nullptr) {
      delete payload_.get_response_;
    }
    clear_has_payload();
  }
}
inline ::Data::get_response* key_value_message::release_get_response() {
  // @@protoc_insertion_point(field_release:Data.key_value_message.get_response)
  if (_internal_has_get_response()) {
    clear_has_payload();
      ::Data::get_response* temp = payload_.get_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.get_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Data::get_response& key_value_message::_internal_get_response() const {
  return _internal_has_get_response()
      ? *payload_.get_response_
      : *reinterpret_cast< ::Data::get_response*>(&::Data::_get_response_default_instance_);
}
inline const ::Data::get_response& key_value_message::get_response() const {
  // @@protoc_insertion_point(field_get:Data.key_value_message.get_response)
  return _internal_get_response();
}
inline ::Data::get_response* key_value_message::unsafe_arena_release_get_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Data.key_value_message.get_response)
  if (_internal_has_get_response()) {
    clear_has_payload();
    ::Data::get_response* temp = payload_.get_response_;
    payload_.get_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void key_value_message::unsafe_arena_set_allocated_get_response(::Data::get_response* get_response) {
  clear_payload();
  if (get_response) {
    set_has_get_response();
    payload_.get_response_ = get_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Data.key_value_message.get_response)
}
inline ::Data::get_response* key_value_message::_internal_mutable_get_response() {
  if (!_internal_has_get_response()) {
    clear_payload();
    set_has_get_response();
    payload_.get_response_ = CreateMaybeMessage< ::Data::get_response >(GetArena());
  }
  return payload_.get_response_;
}
inline ::Data::get_response* key_value_message::mutable_get_response() {
  // @@protoc_insertion_point(field_mutable:Data.key_value_message.get_response)
  return _internal_mutable_get_response();
}

inline bool key_value_message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void key_value_message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline key_value_message::PayloadCase key_value_message::payload_case() const {
  return key_value_message::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
