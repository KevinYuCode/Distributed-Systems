// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DIRSVC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DIRSVC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DIRSVC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DIRSVC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DIRSVC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DIRSVC_2eproto;
namespace DIRSVC {
class dirSvcRequest;
class dirSvcRequestDefaultTypeInternal;
extern dirSvcRequestDefaultTypeInternal _dirSvcRequest_default_instance_;
class dirSvcResponse;
class dirSvcResponseDefaultTypeInternal;
extern dirSvcResponseDefaultTypeInternal _dirSvcResponse_default_instance_;
class registerRequest;
class registerRequestDefaultTypeInternal;
extern registerRequestDefaultTypeInternal _registerRequest_default_instance_;
class registerResponse;
class registerResponseDefaultTypeInternal;
extern registerResponseDefaultTypeInternal _registerResponse_default_instance_;
class searchRequest;
class searchRequestDefaultTypeInternal;
extern searchRequestDefaultTypeInternal _searchRequest_default_instance_;
class searchResponse;
class searchResponseDefaultTypeInternal;
extern searchResponseDefaultTypeInternal _searchResponse_default_instance_;
}  // namespace DIRSVC
PROTOBUF_NAMESPACE_OPEN
template<> ::DIRSVC::dirSvcRequest* Arena::CreateMaybeMessage<::DIRSVC::dirSvcRequest>(Arena*);
template<> ::DIRSVC::dirSvcResponse* Arena::CreateMaybeMessage<::DIRSVC::dirSvcResponse>(Arena*);
template<> ::DIRSVC::registerRequest* Arena::CreateMaybeMessage<::DIRSVC::registerRequest>(Arena*);
template<> ::DIRSVC::registerResponse* Arena::CreateMaybeMessage<::DIRSVC::registerResponse>(Arena*);
template<> ::DIRSVC::searchRequest* Arena::CreateMaybeMessage<::DIRSVC::searchRequest>(Arena*);
template<> ::DIRSVC::searchResponse* Arena::CreateMaybeMessage<::DIRSVC::searchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DIRSVC {

// ===================================================================

class dirSvcRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DIRSVC.dirSvcRequest) */ {
 public:
  inline dirSvcRequest() : dirSvcRequest(nullptr) {};
  virtual ~dirSvcRequest();

  dirSvcRequest(const dirSvcRequest& from);
  dirSvcRequest(dirSvcRequest&& from) noexcept
    : dirSvcRequest() {
    *this = ::std::move(from);
  }

  inline dirSvcRequest& operator=(const dirSvcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline dirSvcRequest& operator=(dirSvcRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dirSvcRequest& default_instance();

  enum FunctionCase {
    kRegisterArgs = 4,
    kSearchArgs = 5,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dirSvcRequest* internal_default_instance() {
    return reinterpret_cast<const dirSvcRequest*>(
               &_dirSvcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(dirSvcRequest& a, dirSvcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(dirSvcRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dirSvcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dirSvcRequest* New() const final {
    return CreateMaybeMessage<dirSvcRequest>(nullptr);
  }

  dirSvcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dirSvcRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dirSvcRequest& from);
  void MergeFrom(const dirSvcRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dirSvcRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DIRSVC.dirSvcRequest";
  }
  protected:
  explicit dirSvcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DIRSVC_2eproto);
    return ::descriptor_table_DIRSVC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialFieldNumber = 3,
    kRegisterArgsFieldNumber = 4,
    kSearchArgsFieldNumber = 5,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .DIRSVC.registerRequest registerArgs = 4;
  bool has_registerargs() const;
  private:
  bool _internal_has_registerargs() const;
  public:
  void clear_registerargs();
  const ::DIRSVC::registerRequest& registerargs() const;
  ::DIRSVC::registerRequest* release_registerargs();
  ::DIRSVC::registerRequest* mutable_registerargs();
  void set_allocated_registerargs(::DIRSVC::registerRequest* registerargs);
  private:
  const ::DIRSVC::registerRequest& _internal_registerargs() const;
  ::DIRSVC::registerRequest* _internal_mutable_registerargs();
  public:
  void unsafe_arena_set_allocated_registerargs(
      ::DIRSVC::registerRequest* registerargs);
  ::DIRSVC::registerRequest* unsafe_arena_release_registerargs();

  // .DIRSVC.searchRequest searchArgs = 5;
  bool has_searchargs() const;
  private:
  bool _internal_has_searchargs() const;
  public:
  void clear_searchargs();
  const ::DIRSVC::searchRequest& searchargs() const;
  ::DIRSVC::searchRequest* release_searchargs();
  ::DIRSVC::searchRequest* mutable_searchargs();
  void set_allocated_searchargs(::DIRSVC::searchRequest* searchargs);
  private:
  const ::DIRSVC::searchRequest& _internal_searchargs() const;
  ::DIRSVC::searchRequest* _internal_mutable_searchargs();
  public:
  void unsafe_arena_set_allocated_searchargs(
      ::DIRSVC::searchRequest* searchargs);
  ::DIRSVC::searchRequest* unsafe_arena_release_searchargs();

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:DIRSVC.dirSvcRequest)
 private:
  class _Internal;
  void set_has_registerargs();
  void set_has_searchargs();

  inline bool has_function() const;
  inline void clear_has_function();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::DIRSVC::registerRequest* registerargs_;
    ::DIRSVC::searchRequest* searchargs_;
  } function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_DIRSVC_2eproto;
};
// -------------------------------------------------------------------

class registerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DIRSVC.registerRequest) */ {
 public:
  inline registerRequest() : registerRequest(nullptr) {};
  virtual ~registerRequest();

  registerRequest(const registerRequest& from);
  registerRequest(registerRequest&& from) noexcept
    : registerRequest() {
    *this = ::std::move(from);
  }

  inline registerRequest& operator=(const registerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerRequest& operator=(registerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const registerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerRequest* internal_default_instance() {
    return reinterpret_cast<const registerRequest*>(
               &_registerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(registerRequest& a, registerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(registerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline registerRequest* New() const final {
    return CreateMaybeMessage<registerRequest>(nullptr);
  }

  registerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<registerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const registerRequest& from);
  void MergeFrom(const registerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DIRSVC.registerRequest";
  }
  protected:
  explicit registerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DIRSVC_2eproto);
    return ::descriptor_table_DIRSVC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServerNameFieldNumber = 2,
    kServerPortFieldNumber = 3,
  };
  // bytes service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // bytes server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const void* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_name(
      std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // uint32 server_port = 3;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DIRSVC.registerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DIRSVC_2eproto;
};
// -------------------------------------------------------------------

class searchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DIRSVC.searchRequest) */ {
 public:
  inline searchRequest() : searchRequest(nullptr) {};
  virtual ~searchRequest();

  searchRequest(const searchRequest& from);
  searchRequest(searchRequest&& from) noexcept
    : searchRequest() {
    *this = ::std::move(from);
  }

  inline searchRequest& operator=(const searchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline searchRequest& operator=(searchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const searchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchRequest* internal_default_instance() {
    return reinterpret_cast<const searchRequest*>(
               &_searchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(searchRequest& a, searchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(searchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(searchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline searchRequest* New() const final {
    return CreateMaybeMessage<searchRequest>(nullptr);
  }

  searchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<searchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const searchRequest& from);
  void MergeFrom(const searchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DIRSVC.searchRequest";
  }
  protected:
  explicit searchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DIRSVC_2eproto);
    return ::descriptor_table_DIRSVC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // bytes service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const void* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // @@protoc_insertion_point(class_scope:DIRSVC.searchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DIRSVC_2eproto;
};
// -------------------------------------------------------------------

class dirSvcResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DIRSVC.dirSvcResponse) */ {
 public:
  inline dirSvcResponse() : dirSvcResponse(nullptr) {};
  virtual ~dirSvcResponse();

  dirSvcResponse(const dirSvcResponse& from);
  dirSvcResponse(dirSvcResponse&& from) noexcept
    : dirSvcResponse() {
    *this = ::std::move(from);
  }

  inline dirSvcResponse& operator=(const dirSvcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline dirSvcResponse& operator=(dirSvcResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dirSvcResponse& default_instance();

  enum FunctionCase {
    kRegisterRes = 4,
    kSearchRes = 5,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dirSvcResponse* internal_default_instance() {
    return reinterpret_cast<const dirSvcResponse*>(
               &_dirSvcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(dirSvcResponse& a, dirSvcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(dirSvcResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dirSvcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dirSvcResponse* New() const final {
    return CreateMaybeMessage<dirSvcResponse>(nullptr);
  }

  dirSvcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dirSvcResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dirSvcResponse& from);
  void MergeFrom(const dirSvcResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dirSvcResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DIRSVC.dirSvcResponse";
  }
  protected:
  explicit dirSvcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DIRSVC_2eproto);
    return ::descriptor_table_DIRSVC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialFieldNumber = 3,
    kRegisterResFieldNumber = 4,
    kSearchResFieldNumber = 5,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .DIRSVC.registerResponse registerRes = 4;
  bool has_registerres() const;
  private:
  bool _internal_has_registerres() const;
  public:
  void clear_registerres();
  const ::DIRSVC::registerResponse& registerres() const;
  ::DIRSVC::registerResponse* release_registerres();
  ::DIRSVC::registerResponse* mutable_registerres();
  void set_allocated_registerres(::DIRSVC::registerResponse* registerres);
  private:
  const ::DIRSVC::registerResponse& _internal_registerres() const;
  ::DIRSVC::registerResponse* _internal_mutable_registerres();
  public:
  void unsafe_arena_set_allocated_registerres(
      ::DIRSVC::registerResponse* registerres);
  ::DIRSVC::registerResponse* unsafe_arena_release_registerres();

  // .DIRSVC.searchResponse searchRes = 5;
  bool has_searchres() const;
  private:
  bool _internal_has_searchres() const;
  public:
  void clear_searchres();
  const ::DIRSVC::searchResponse& searchres() const;
  ::DIRSVC::searchResponse* release_searchres();
  ::DIRSVC::searchResponse* mutable_searchres();
  void set_allocated_searchres(::DIRSVC::searchResponse* searchres);
  private:
  const ::DIRSVC::searchResponse& _internal_searchres() const;
  ::DIRSVC::searchResponse* _internal_mutable_searchres();
  public:
  void unsafe_arena_set_allocated_searchres(
      ::DIRSVC::searchResponse* searchres);
  ::DIRSVC::searchResponse* unsafe_arena_release_searchres();

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:DIRSVC.dirSvcResponse)
 private:
  class _Internal;
  void set_has_registerres();
  void set_has_searchres();

  inline bool has_function() const;
  inline void clear_has_function();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::DIRSVC::registerResponse* registerres_;
    ::DIRSVC::searchResponse* searchres_;
  } function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_DIRSVC_2eproto;
};
// -------------------------------------------------------------------

class registerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DIRSVC.registerResponse) */ {
 public:
  inline registerResponse() : registerResponse(nullptr) {};
  virtual ~registerResponse();

  registerResponse(const registerResponse& from);
  registerResponse(registerResponse&& from) noexcept
    : registerResponse() {
    *this = ::std::move(from);
  }

  inline registerResponse& operator=(const registerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerResponse& operator=(registerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const registerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerResponse* internal_default_instance() {
    return reinterpret_cast<const registerResponse*>(
               &_registerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(registerResponse& a, registerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(registerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline registerResponse* New() const final {
    return CreateMaybeMessage<registerResponse>(nullptr);
  }

  registerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<registerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const registerResponse& from);
  void MergeFrom(const registerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DIRSVC.registerResponse";
  }
  protected:
  explicit registerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DIRSVC_2eproto);
    return ::descriptor_table_DIRSVC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DIRSVC.registerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DIRSVC_2eproto;
};
// -------------------------------------------------------------------

class searchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DIRSVC.searchResponse) */ {
 public:
  inline searchResponse() : searchResponse(nullptr) {};
  virtual ~searchResponse();

  searchResponse(const searchResponse& from);
  searchResponse(searchResponse&& from) noexcept
    : searchResponse() {
    *this = ::std::move(from);
  }

  inline searchResponse& operator=(const searchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline searchResponse& operator=(searchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const searchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const searchResponse* internal_default_instance() {
    return reinterpret_cast<const searchResponse*>(
               &_searchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(searchResponse& a, searchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(searchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(searchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline searchResponse* New() const final {
    return CreateMaybeMessage<searchResponse>(nullptr);
  }

  searchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<searchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const searchResponse& from);
  void MergeFrom(const searchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DIRSVC.searchResponse";
  }
  protected:
  explicit searchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DIRSVC_2eproto);
    return ::descriptor_table_DIRSVC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kStatusFieldNumber = 1,
    kServerPortFieldNumber = 3,
  };
  // bytes server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const void* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_name(
      std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // uint32 server_port = 3;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DIRSVC.searchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DIRSVC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dirSvcRequest

// uint32 magic = 1;
inline void dirSvcRequest::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcRequest::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcRequest::magic() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcRequest.magic)
  return _internal_magic();
}
inline void dirSvcRequest::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void dirSvcRequest::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:DIRSVC.dirSvcRequest.magic)
}

// uint32 version = 2;
inline void dirSvcRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcRequest::version() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcRequest.version)
  return _internal_version();
}
inline void dirSvcRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void dirSvcRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:DIRSVC.dirSvcRequest.version)
}

// uint32 serial = 3;
inline void dirSvcRequest::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcRequest::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcRequest::serial() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcRequest.serial)
  return _internal_serial();
}
inline void dirSvcRequest::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void dirSvcRequest::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:DIRSVC.dirSvcRequest.serial)
}

// .DIRSVC.registerRequest registerArgs = 4;
inline bool dirSvcRequest::_internal_has_registerargs() const {
  return function_case() == kRegisterArgs;
}
inline bool dirSvcRequest::has_registerargs() const {
  return _internal_has_registerargs();
}
inline void dirSvcRequest::set_has_registerargs() {
  _oneof_case_[0] = kRegisterArgs;
}
inline void dirSvcRequest::clear_registerargs() {
  if (_internal_has_registerargs()) {
    if (GetArena() == nullptr) {
      delete function_.registerargs_;
    }
    clear_has_function();
  }
}
inline ::DIRSVC::registerRequest* dirSvcRequest::release_registerargs() {
  // @@protoc_insertion_point(field_release:DIRSVC.dirSvcRequest.registerArgs)
  if (_internal_has_registerargs()) {
    clear_has_function();
      ::DIRSVC::registerRequest* temp = function_.registerargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.registerargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DIRSVC::registerRequest& dirSvcRequest::_internal_registerargs() const {
  return _internal_has_registerargs()
      ? *function_.registerargs_
      : *reinterpret_cast< ::DIRSVC::registerRequest*>(&::DIRSVC::_registerRequest_default_instance_);
}
inline const ::DIRSVC::registerRequest& dirSvcRequest::registerargs() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcRequest.registerArgs)
  return _internal_registerargs();
}
inline ::DIRSVC::registerRequest* dirSvcRequest::unsafe_arena_release_registerargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.dirSvcRequest.registerArgs)
  if (_internal_has_registerargs()) {
    clear_has_function();
    ::DIRSVC::registerRequest* temp = function_.registerargs_;
    function_.registerargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void dirSvcRequest::unsafe_arena_set_allocated_registerargs(::DIRSVC::registerRequest* registerargs) {
  clear_function();
  if (registerargs) {
    set_has_registerargs();
    function_.registerargs_ = registerargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.dirSvcRequest.registerArgs)
}
inline ::DIRSVC::registerRequest* dirSvcRequest::_internal_mutable_registerargs() {
  if (!_internal_has_registerargs()) {
    clear_function();
    set_has_registerargs();
    function_.registerargs_ = CreateMaybeMessage< ::DIRSVC::registerRequest >(GetArena());
  }
  return function_.registerargs_;
}
inline ::DIRSVC::registerRequest* dirSvcRequest::mutable_registerargs() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.dirSvcRequest.registerArgs)
  return _internal_mutable_registerargs();
}

// .DIRSVC.searchRequest searchArgs = 5;
inline bool dirSvcRequest::_internal_has_searchargs() const {
  return function_case() == kSearchArgs;
}
inline bool dirSvcRequest::has_searchargs() const {
  return _internal_has_searchargs();
}
inline void dirSvcRequest::set_has_searchargs() {
  _oneof_case_[0] = kSearchArgs;
}
inline void dirSvcRequest::clear_searchargs() {
  if (_internal_has_searchargs()) {
    if (GetArena() == nullptr) {
      delete function_.searchargs_;
    }
    clear_has_function();
  }
}
inline ::DIRSVC::searchRequest* dirSvcRequest::release_searchargs() {
  // @@protoc_insertion_point(field_release:DIRSVC.dirSvcRequest.searchArgs)
  if (_internal_has_searchargs()) {
    clear_has_function();
      ::DIRSVC::searchRequest* temp = function_.searchargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.searchargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DIRSVC::searchRequest& dirSvcRequest::_internal_searchargs() const {
  return _internal_has_searchargs()
      ? *function_.searchargs_
      : *reinterpret_cast< ::DIRSVC::searchRequest*>(&::DIRSVC::_searchRequest_default_instance_);
}
inline const ::DIRSVC::searchRequest& dirSvcRequest::searchargs() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcRequest.searchArgs)
  return _internal_searchargs();
}
inline ::DIRSVC::searchRequest* dirSvcRequest::unsafe_arena_release_searchargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.dirSvcRequest.searchArgs)
  if (_internal_has_searchargs()) {
    clear_has_function();
    ::DIRSVC::searchRequest* temp = function_.searchargs_;
    function_.searchargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void dirSvcRequest::unsafe_arena_set_allocated_searchargs(::DIRSVC::searchRequest* searchargs) {
  clear_function();
  if (searchargs) {
    set_has_searchargs();
    function_.searchargs_ = searchargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.dirSvcRequest.searchArgs)
}
inline ::DIRSVC::searchRequest* dirSvcRequest::_internal_mutable_searchargs() {
  if (!_internal_has_searchargs()) {
    clear_function();
    set_has_searchargs();
    function_.searchargs_ = CreateMaybeMessage< ::DIRSVC::searchRequest >(GetArena());
  }
  return function_.searchargs_;
}
inline ::DIRSVC::searchRequest* dirSvcRequest::mutable_searchargs() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.dirSvcRequest.searchArgs)
  return _internal_mutable_searchargs();
}

inline bool dirSvcRequest::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void dirSvcRequest::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline dirSvcRequest::FunctionCase dirSvcRequest::function_case() const {
  return dirSvcRequest::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerRequest

// bytes service_name = 1;
inline void registerRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& registerRequest::service_name() const {
  // @@protoc_insertion_point(field_get:DIRSVC.registerRequest.service_name)
  return _internal_service_name();
}
inline void registerRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:DIRSVC.registerRequest.service_name)
}
inline std::string* registerRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.registerRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& registerRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void registerRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void registerRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DIRSVC.registerRequest.service_name)
}
inline void registerRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DIRSVC.registerRequest.service_name)
}
inline void registerRequest::set_service_name(const void* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DIRSVC.registerRequest.service_name)
}
inline std::string* registerRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* registerRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:DIRSVC.registerRequest.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void registerRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.registerRequest.service_name)
}
inline std::string* registerRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.registerRequest.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void registerRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.registerRequest.service_name)
}

// bytes server_name = 2;
inline void registerRequest::clear_server_name() {
  server_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& registerRequest::server_name() const {
  // @@protoc_insertion_point(field_get:DIRSVC.registerRequest.server_name)
  return _internal_server_name();
}
inline void registerRequest::set_server_name(const std::string& value) {
  _internal_set_server_name(value);
  // @@protoc_insertion_point(field_set:DIRSVC.registerRequest.server_name)
}
inline std::string* registerRequest::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.registerRequest.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& registerRequest::_internal_server_name() const {
  return server_name_.Get();
}
inline void registerRequest::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void registerRequest::set_server_name(std::string&& value) {
  
  server_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DIRSVC.registerRequest.server_name)
}
inline void registerRequest::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DIRSVC.registerRequest.server_name)
}
inline void registerRequest::set_server_name(const void* value,
    size_t size) {
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DIRSVC.registerRequest.server_name)
}
inline std::string* registerRequest::_internal_mutable_server_name() {
  
  return server_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* registerRequest::release_server_name() {
  // @@protoc_insertion_point(field_release:DIRSVC.registerRequest.server_name)
  return server_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void registerRequest::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.registerRequest.server_name)
}
inline std::string* registerRequest::unsafe_arena_release_server_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.registerRequest.server_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void registerRequest::unsafe_arena_set_allocated_server_name(
    std::string* server_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.registerRequest.server_name)
}

// uint32 server_port = 3;
inline void registerRequest::clear_server_port() {
  server_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 registerRequest::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 registerRequest::server_port() const {
  // @@protoc_insertion_point(field_get:DIRSVC.registerRequest.server_port)
  return _internal_server_port();
}
inline void registerRequest::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_port_ = value;
}
inline void registerRequest::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:DIRSVC.registerRequest.server_port)
}

// -------------------------------------------------------------------

// searchRequest

// bytes service_name = 1;
inline void searchRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& searchRequest::service_name() const {
  // @@protoc_insertion_point(field_get:DIRSVC.searchRequest.service_name)
  return _internal_service_name();
}
inline void searchRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:DIRSVC.searchRequest.service_name)
}
inline std::string* searchRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.searchRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& searchRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void searchRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void searchRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DIRSVC.searchRequest.service_name)
}
inline void searchRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DIRSVC.searchRequest.service_name)
}
inline void searchRequest::set_service_name(const void* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DIRSVC.searchRequest.service_name)
}
inline std::string* searchRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* searchRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:DIRSVC.searchRequest.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void searchRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.searchRequest.service_name)
}
inline std::string* searchRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.searchRequest.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void searchRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.searchRequest.service_name)
}

// -------------------------------------------------------------------

// dirSvcResponse

// uint32 magic = 1;
inline void dirSvcResponse::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcResponse::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcResponse::magic() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcResponse.magic)
  return _internal_magic();
}
inline void dirSvcResponse::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void dirSvcResponse::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:DIRSVC.dirSvcResponse.magic)
}

// uint32 version = 2;
inline void dirSvcResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcResponse::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcResponse::version() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcResponse.version)
  return _internal_version();
}
inline void dirSvcResponse::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void dirSvcResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:DIRSVC.dirSvcResponse.version)
}

// uint32 serial = 3;
inline void dirSvcResponse::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcResponse::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dirSvcResponse::serial() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcResponse.serial)
  return _internal_serial();
}
inline void dirSvcResponse::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void dirSvcResponse::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:DIRSVC.dirSvcResponse.serial)
}

// .DIRSVC.registerResponse registerRes = 4;
inline bool dirSvcResponse::_internal_has_registerres() const {
  return function_case() == kRegisterRes;
}
inline bool dirSvcResponse::has_registerres() const {
  return _internal_has_registerres();
}
inline void dirSvcResponse::set_has_registerres() {
  _oneof_case_[0] = kRegisterRes;
}
inline void dirSvcResponse::clear_registerres() {
  if (_internal_has_registerres()) {
    if (GetArena() == nullptr) {
      delete function_.registerres_;
    }
    clear_has_function();
  }
}
inline ::DIRSVC::registerResponse* dirSvcResponse::release_registerres() {
  // @@protoc_insertion_point(field_release:DIRSVC.dirSvcResponse.registerRes)
  if (_internal_has_registerres()) {
    clear_has_function();
      ::DIRSVC::registerResponse* temp = function_.registerres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.registerres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DIRSVC::registerResponse& dirSvcResponse::_internal_registerres() const {
  return _internal_has_registerres()
      ? *function_.registerres_
      : *reinterpret_cast< ::DIRSVC::registerResponse*>(&::DIRSVC::_registerResponse_default_instance_);
}
inline const ::DIRSVC::registerResponse& dirSvcResponse::registerres() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcResponse.registerRes)
  return _internal_registerres();
}
inline ::DIRSVC::registerResponse* dirSvcResponse::unsafe_arena_release_registerres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.dirSvcResponse.registerRes)
  if (_internal_has_registerres()) {
    clear_has_function();
    ::DIRSVC::registerResponse* temp = function_.registerres_;
    function_.registerres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void dirSvcResponse::unsafe_arena_set_allocated_registerres(::DIRSVC::registerResponse* registerres) {
  clear_function();
  if (registerres) {
    set_has_registerres();
    function_.registerres_ = registerres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.dirSvcResponse.registerRes)
}
inline ::DIRSVC::registerResponse* dirSvcResponse::_internal_mutable_registerres() {
  if (!_internal_has_registerres()) {
    clear_function();
    set_has_registerres();
    function_.registerres_ = CreateMaybeMessage< ::DIRSVC::registerResponse >(GetArena());
  }
  return function_.registerres_;
}
inline ::DIRSVC::registerResponse* dirSvcResponse::mutable_registerres() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.dirSvcResponse.registerRes)
  return _internal_mutable_registerres();
}

// .DIRSVC.searchResponse searchRes = 5;
inline bool dirSvcResponse::_internal_has_searchres() const {
  return function_case() == kSearchRes;
}
inline bool dirSvcResponse::has_searchres() const {
  return _internal_has_searchres();
}
inline void dirSvcResponse::set_has_searchres() {
  _oneof_case_[0] = kSearchRes;
}
inline void dirSvcResponse::clear_searchres() {
  if (_internal_has_searchres()) {
    if (GetArena() == nullptr) {
      delete function_.searchres_;
    }
    clear_has_function();
  }
}
inline ::DIRSVC::searchResponse* dirSvcResponse::release_searchres() {
  // @@protoc_insertion_point(field_release:DIRSVC.dirSvcResponse.searchRes)
  if (_internal_has_searchres()) {
    clear_has_function();
      ::DIRSVC::searchResponse* temp = function_.searchres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.searchres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DIRSVC::searchResponse& dirSvcResponse::_internal_searchres() const {
  return _internal_has_searchres()
      ? *function_.searchres_
      : *reinterpret_cast< ::DIRSVC::searchResponse*>(&::DIRSVC::_searchResponse_default_instance_);
}
inline const ::DIRSVC::searchResponse& dirSvcResponse::searchres() const {
  // @@protoc_insertion_point(field_get:DIRSVC.dirSvcResponse.searchRes)
  return _internal_searchres();
}
inline ::DIRSVC::searchResponse* dirSvcResponse::unsafe_arena_release_searchres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.dirSvcResponse.searchRes)
  if (_internal_has_searchres()) {
    clear_has_function();
    ::DIRSVC::searchResponse* temp = function_.searchres_;
    function_.searchres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void dirSvcResponse::unsafe_arena_set_allocated_searchres(::DIRSVC::searchResponse* searchres) {
  clear_function();
  if (searchres) {
    set_has_searchres();
    function_.searchres_ = searchres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.dirSvcResponse.searchRes)
}
inline ::DIRSVC::searchResponse* dirSvcResponse::_internal_mutable_searchres() {
  if (!_internal_has_searchres()) {
    clear_function();
    set_has_searchres();
    function_.searchres_ = CreateMaybeMessage< ::DIRSVC::searchResponse >(GetArena());
  }
  return function_.searchres_;
}
inline ::DIRSVC::searchResponse* dirSvcResponse::mutable_searchres() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.dirSvcResponse.searchRes)
  return _internal_mutable_searchres();
}

inline bool dirSvcResponse::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void dirSvcResponse::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline dirSvcResponse::FunctionCase dirSvcResponse::function_case() const {
  return dirSvcResponse::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// registerResponse

// bool status = 1;
inline void registerResponse::clear_status() {
  status_ = false;
}
inline bool registerResponse::_internal_status() const {
  return status_;
}
inline bool registerResponse::status() const {
  // @@protoc_insertion_point(field_get:DIRSVC.registerResponse.status)
  return _internal_status();
}
inline void registerResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void registerResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DIRSVC.registerResponse.status)
}

// -------------------------------------------------------------------

// searchResponse

// bool status = 1;
inline void searchResponse::clear_status() {
  status_ = false;
}
inline bool searchResponse::_internal_status() const {
  return status_;
}
inline bool searchResponse::status() const {
  // @@protoc_insertion_point(field_get:DIRSVC.searchResponse.status)
  return _internal_status();
}
inline void searchResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void searchResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DIRSVC.searchResponse.status)
}

// bytes server_name = 2;
inline void searchResponse::clear_server_name() {
  server_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& searchResponse::server_name() const {
  // @@protoc_insertion_point(field_get:DIRSVC.searchResponse.server_name)
  return _internal_server_name();
}
inline void searchResponse::set_server_name(const std::string& value) {
  _internal_set_server_name(value);
  // @@protoc_insertion_point(field_set:DIRSVC.searchResponse.server_name)
}
inline std::string* searchResponse::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:DIRSVC.searchResponse.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& searchResponse::_internal_server_name() const {
  return server_name_.Get();
}
inline void searchResponse::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void searchResponse::set_server_name(std::string&& value) {
  
  server_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DIRSVC.searchResponse.server_name)
}
inline void searchResponse::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DIRSVC.searchResponse.server_name)
}
inline void searchResponse::set_server_name(const void* value,
    size_t size) {
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DIRSVC.searchResponse.server_name)
}
inline std::string* searchResponse::_internal_mutable_server_name() {
  
  return server_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* searchResponse::release_server_name() {
  // @@protoc_insertion_point(field_release:DIRSVC.searchResponse.server_name)
  return server_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void searchResponse::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.searchResponse.server_name)
}
inline std::string* searchResponse::unsafe_arena_release_server_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DIRSVC.searchResponse.server_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void searchResponse::unsafe_arena_set_allocated_server_name(
    std::string* server_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DIRSVC.searchResponse.server_name)
}

// uint32 server_port = 3;
inline void searchResponse::clear_server_port() {
  server_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 searchResponse::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 searchResponse::server_port() const {
  // @@protoc_insertion_point(field_get:DIRSVC.searchResponse.server_port)
  return _internal_server_port();
}
inline void searchResponse::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_port_ = value;
}
inline void searchResponse::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:DIRSVC.searchResponse.server_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DIRSVC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DIRSVC_2eproto
