// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E477KV.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_E477KV_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_E477KV_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_E477KV_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_E477KV_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_E477KV_2eproto;
namespace E477KV {
class getRequest;
class getRequestDefaultTypeInternal;
extern getRequestDefaultTypeInternal _getRequest_default_instance_;
class getResponse;
class getResponseDefaultTypeInternal;
extern getResponseDefaultTypeInternal _getResponse_default_instance_;
class kvRequest;
class kvRequestDefaultTypeInternal;
extern kvRequestDefaultTypeInternal _kvRequest_default_instance_;
class kvResponse;
class kvResponseDefaultTypeInternal;
extern kvResponseDefaultTypeInternal _kvResponse_default_instance_;
class putRequest;
class putRequestDefaultTypeInternal;
extern putRequestDefaultTypeInternal _putRequest_default_instance_;
class putResponse;
class putResponseDefaultTypeInternal;
extern putResponseDefaultTypeInternal _putResponse_default_instance_;
}  // namespace E477KV
PROTOBUF_NAMESPACE_OPEN
template<> ::E477KV::getRequest* Arena::CreateMaybeMessage<::E477KV::getRequest>(Arena*);
template<> ::E477KV::getResponse* Arena::CreateMaybeMessage<::E477KV::getResponse>(Arena*);
template<> ::E477KV::kvRequest* Arena::CreateMaybeMessage<::E477KV::kvRequest>(Arena*);
template<> ::E477KV::kvResponse* Arena::CreateMaybeMessage<::E477KV::kvResponse>(Arena*);
template<> ::E477KV::putRequest* Arena::CreateMaybeMessage<::E477KV::putRequest>(Arena*);
template<> ::E477KV::putResponse* Arena::CreateMaybeMessage<::E477KV::putResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace E477KV {

// ===================================================================

class kvRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:E477KV.kvRequest) */ {
 public:
  inline kvRequest() : kvRequest(nullptr) {};
  virtual ~kvRequest();

  kvRequest(const kvRequest& from);
  kvRequest(kvRequest&& from) noexcept
    : kvRequest() {
    *this = ::std::move(from);
  }

  inline kvRequest& operator=(const kvRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline kvRequest& operator=(kvRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const kvRequest& default_instance();

  enum FunctionCase {
    kPutArgs = 4,
    kGetArgs = 5,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvRequest* internal_default_instance() {
    return reinterpret_cast<const kvRequest*>(
               &_kvRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(kvRequest& a, kvRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(kvRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(kvRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline kvRequest* New() const final {
    return CreateMaybeMessage<kvRequest>(nullptr);
  }

  kvRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<kvRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const kvRequest& from);
  void MergeFrom(const kvRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "E477KV.kvRequest";
  }
  protected:
  explicit kvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_E477KV_2eproto);
    return ::descriptor_table_E477KV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialFieldNumber = 3,
    kPutArgsFieldNumber = 4,
    kGetArgsFieldNumber = 5,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .E477KV.putRequest putArgs = 4;
  bool has_putargs() const;
  private:
  bool _internal_has_putargs() const;
  public:
  void clear_putargs();
  const ::E477KV::putRequest& putargs() const;
  ::E477KV::putRequest* release_putargs();
  ::E477KV::putRequest* mutable_putargs();
  void set_allocated_putargs(::E477KV::putRequest* putargs);
  private:
  const ::E477KV::putRequest& _internal_putargs() const;
  ::E477KV::putRequest* _internal_mutable_putargs();
  public:
  void unsafe_arena_set_allocated_putargs(
      ::E477KV::putRequest* putargs);
  ::E477KV::putRequest* unsafe_arena_release_putargs();

  // .E477KV.getRequest getArgs = 5;
  bool has_getargs() const;
  private:
  bool _internal_has_getargs() const;
  public:
  void clear_getargs();
  const ::E477KV::getRequest& getargs() const;
  ::E477KV::getRequest* release_getargs();
  ::E477KV::getRequest* mutable_getargs();
  void set_allocated_getargs(::E477KV::getRequest* getargs);
  private:
  const ::E477KV::getRequest& _internal_getargs() const;
  ::E477KV::getRequest* _internal_mutable_getargs();
  public:
  void unsafe_arena_set_allocated_getargs(
      ::E477KV::getRequest* getargs);
  ::E477KV::getRequest* unsafe_arena_release_getargs();

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:E477KV.kvRequest)
 private:
  class _Internal;
  void set_has_putargs();
  void set_has_getargs();

  inline bool has_function() const;
  inline void clear_has_function();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::E477KV::putRequest* putargs_;
    ::E477KV::getRequest* getargs_;
  } function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_E477KV_2eproto;
};
// -------------------------------------------------------------------

class putRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:E477KV.putRequest) */ {
 public:
  inline putRequest() : putRequest(nullptr) {};
  virtual ~putRequest();

  putRequest(const putRequest& from);
  putRequest(putRequest&& from) noexcept
    : putRequest() {
    *this = ::std::move(from);
  }

  inline putRequest& operator=(const putRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline putRequest& operator=(putRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const putRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const putRequest* internal_default_instance() {
    return reinterpret_cast<const putRequest*>(
               &_putRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(putRequest& a, putRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(putRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(putRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline putRequest* New() const final {
    return CreateMaybeMessage<putRequest>(nullptr);
  }

  putRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<putRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const putRequest& from);
  void MergeFrom(const putRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(putRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "E477KV.putRequest";
  }
  protected:
  explicit putRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_E477KV_2eproto);
    return ::descriptor_table_E477KV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:E477KV.putRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_E477KV_2eproto;
};
// -------------------------------------------------------------------

class getRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:E477KV.getRequest) */ {
 public:
  inline getRequest() : getRequest(nullptr) {};
  virtual ~getRequest();

  getRequest(const getRequest& from);
  getRequest(getRequest&& from) noexcept
    : getRequest() {
    *this = ::std::move(from);
  }

  inline getRequest& operator=(const getRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getRequest& operator=(getRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getRequest* internal_default_instance() {
    return reinterpret_cast<const getRequest*>(
               &_getRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getRequest& a, getRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getRequest* New() const final {
    return CreateMaybeMessage<getRequest>(nullptr);
  }

  getRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getRequest& from);
  void MergeFrom(const getRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "E477KV.getRequest";
  }
  protected:
  explicit getRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_E477KV_2eproto);
    return ::descriptor_table_E477KV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // int32 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::int32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:E477KV.getRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_E477KV_2eproto;
};
// -------------------------------------------------------------------

class kvResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:E477KV.kvResponse) */ {
 public:
  inline kvResponse() : kvResponse(nullptr) {};
  virtual ~kvResponse();

  kvResponse(const kvResponse& from);
  kvResponse(kvResponse&& from) noexcept
    : kvResponse() {
    *this = ::std::move(from);
  }

  inline kvResponse& operator=(const kvResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline kvResponse& operator=(kvResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const kvResponse& default_instance();

  enum FunctionCase {
    kPutRes = 4,
    kGetRes = 5,
    FUNCTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const kvResponse* internal_default_instance() {
    return reinterpret_cast<const kvResponse*>(
               &_kvResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(kvResponse& a, kvResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(kvResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(kvResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline kvResponse* New() const final {
    return CreateMaybeMessage<kvResponse>(nullptr);
  }

  kvResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<kvResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const kvResponse& from);
  void MergeFrom(const kvResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(kvResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "E477KV.kvResponse";
  }
  protected:
  explicit kvResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_E477KV_2eproto);
    return ::descriptor_table_E477KV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSerialFieldNumber = 3,
    kPutResFieldNumber = 4,
    kGetResFieldNumber = 5,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 serial = 3;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .E477KV.putResponse putRes = 4;
  bool has_putres() const;
  private:
  bool _internal_has_putres() const;
  public:
  void clear_putres();
  const ::E477KV::putResponse& putres() const;
  ::E477KV::putResponse* release_putres();
  ::E477KV::putResponse* mutable_putres();
  void set_allocated_putres(::E477KV::putResponse* putres);
  private:
  const ::E477KV::putResponse& _internal_putres() const;
  ::E477KV::putResponse* _internal_mutable_putres();
  public:
  void unsafe_arena_set_allocated_putres(
      ::E477KV::putResponse* putres);
  ::E477KV::putResponse* unsafe_arena_release_putres();

  // .E477KV.getResponse getRes = 5;
  bool has_getres() const;
  private:
  bool _internal_has_getres() const;
  public:
  void clear_getres();
  const ::E477KV::getResponse& getres() const;
  ::E477KV::getResponse* release_getres();
  ::E477KV::getResponse* mutable_getres();
  void set_allocated_getres(::E477KV::getResponse* getres);
  private:
  const ::E477KV::getResponse& _internal_getres() const;
  ::E477KV::getResponse* _internal_mutable_getres();
  public:
  void unsafe_arena_set_allocated_getres(
      ::E477KV::getResponse* getres);
  ::E477KV::getResponse* unsafe_arena_release_getres();

  void clear_function();
  FunctionCase function_case() const;
  // @@protoc_insertion_point(class_scope:E477KV.kvResponse)
 private:
  class _Internal;
  void set_has_putres();
  void set_has_getres();

  inline bool has_function() const;
  inline void clear_has_function();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  union FunctionUnion {
    FunctionUnion() {}
    ::E477KV::putResponse* putres_;
    ::E477KV::getResponse* getres_;
  } function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_E477KV_2eproto;
};
// -------------------------------------------------------------------

class putResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:E477KV.putResponse) */ {
 public:
  inline putResponse() : putResponse(nullptr) {};
  virtual ~putResponse();

  putResponse(const putResponse& from);
  putResponse(putResponse&& from) noexcept
    : putResponse() {
    *this = ::std::move(from);
  }

  inline putResponse& operator=(const putResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline putResponse& operator=(putResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const putResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const putResponse* internal_default_instance() {
    return reinterpret_cast<const putResponse*>(
               &_putResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(putResponse& a, putResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(putResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(putResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline putResponse* New() const final {
    return CreateMaybeMessage<putResponse>(nullptr);
  }

  putResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<putResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const putResponse& from);
  void MergeFrom(const putResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(putResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "E477KV.putResponse";
  }
  protected:
  explicit putResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_E477KV_2eproto);
    return ::descriptor_table_E477KV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:E477KV.putResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_E477KV_2eproto;
};
// -------------------------------------------------------------------

class getResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:E477KV.getResponse) */ {
 public:
  inline getResponse() : getResponse(nullptr) {};
  virtual ~getResponse();

  getResponse(const getResponse& from);
  getResponse(getResponse&& from) noexcept
    : getResponse() {
    *this = ::std::move(from);
  }

  inline getResponse& operator=(const getResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getResponse& operator=(getResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getResponse* internal_default_instance() {
    return reinterpret_cast<const getResponse*>(
               &_getResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getResponse& a, getResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getResponse* New() const final {
    return CreateMaybeMessage<getResponse>(nullptr);
  }

  getResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getResponse& from);
  void MergeFrom(const getResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "E477KV.getResponse";
  }
  protected:
  explicit getResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_E477KV_2eproto);
    return ::descriptor_table_E477KV_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:E477KV.getResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_E477KV_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// kvRequest

// uint32 magic = 1;
inline void kvRequest::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvRequest::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvRequest::magic() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.magic)
  return _internal_magic();
}
inline void kvRequest::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void kvRequest::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:E477KV.kvRequest.magic)
}

// uint32 version = 2;
inline void kvRequest::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvRequest::version() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.version)
  return _internal_version();
}
inline void kvRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void kvRequest::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:E477KV.kvRequest.version)
}

// uint32 serial = 3;
inline void kvRequest::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvRequest::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvRequest::serial() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.serial)
  return _internal_serial();
}
inline void kvRequest::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void kvRequest::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:E477KV.kvRequest.serial)
}

// .E477KV.putRequest putArgs = 4;
inline bool kvRequest::_internal_has_putargs() const {
  return function_case() == kPutArgs;
}
inline bool kvRequest::has_putargs() const {
  return _internal_has_putargs();
}
inline void kvRequest::set_has_putargs() {
  _oneof_case_[0] = kPutArgs;
}
inline void kvRequest::clear_putargs() {
  if (_internal_has_putargs()) {
    if (GetArena() == nullptr) {
      delete function_.putargs_;
    }
    clear_has_function();
  }
}
inline ::E477KV::putRequest* kvRequest::release_putargs() {
  // @@protoc_insertion_point(field_release:E477KV.kvRequest.putArgs)
  if (_internal_has_putargs()) {
    clear_has_function();
      ::E477KV::putRequest* temp = function_.putargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.putargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::E477KV::putRequest& kvRequest::_internal_putargs() const {
  return _internal_has_putargs()
      ? *function_.putargs_
      : *reinterpret_cast< ::E477KV::putRequest*>(&::E477KV::_putRequest_default_instance_);
}
inline const ::E477KV::putRequest& kvRequest::putargs() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.putArgs)
  return _internal_putargs();
}
inline ::E477KV::putRequest* kvRequest::unsafe_arena_release_putargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:E477KV.kvRequest.putArgs)
  if (_internal_has_putargs()) {
    clear_has_function();
    ::E477KV::putRequest* temp = function_.putargs_;
    function_.putargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void kvRequest::unsafe_arena_set_allocated_putargs(::E477KV::putRequest* putargs) {
  clear_function();
  if (putargs) {
    set_has_putargs();
    function_.putargs_ = putargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:E477KV.kvRequest.putArgs)
}
inline ::E477KV::putRequest* kvRequest::_internal_mutable_putargs() {
  if (!_internal_has_putargs()) {
    clear_function();
    set_has_putargs();
    function_.putargs_ = CreateMaybeMessage< ::E477KV::putRequest >(GetArena());
  }
  return function_.putargs_;
}
inline ::E477KV::putRequest* kvRequest::mutable_putargs() {
  // @@protoc_insertion_point(field_mutable:E477KV.kvRequest.putArgs)
  return _internal_mutable_putargs();
}

// .E477KV.getRequest getArgs = 5;
inline bool kvRequest::_internal_has_getargs() const {
  return function_case() == kGetArgs;
}
inline bool kvRequest::has_getargs() const {
  return _internal_has_getargs();
}
inline void kvRequest::set_has_getargs() {
  _oneof_case_[0] = kGetArgs;
}
inline void kvRequest::clear_getargs() {
  if (_internal_has_getargs()) {
    if (GetArena() == nullptr) {
      delete function_.getargs_;
    }
    clear_has_function();
  }
}
inline ::E477KV::getRequest* kvRequest::release_getargs() {
  // @@protoc_insertion_point(field_release:E477KV.kvRequest.getArgs)
  if (_internal_has_getargs()) {
    clear_has_function();
      ::E477KV::getRequest* temp = function_.getargs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.getargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::E477KV::getRequest& kvRequest::_internal_getargs() const {
  return _internal_has_getargs()
      ? *function_.getargs_
      : *reinterpret_cast< ::E477KV::getRequest*>(&::E477KV::_getRequest_default_instance_);
}
inline const ::E477KV::getRequest& kvRequest::getargs() const {
  // @@protoc_insertion_point(field_get:E477KV.kvRequest.getArgs)
  return _internal_getargs();
}
inline ::E477KV::getRequest* kvRequest::unsafe_arena_release_getargs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:E477KV.kvRequest.getArgs)
  if (_internal_has_getargs()) {
    clear_has_function();
    ::E477KV::getRequest* temp = function_.getargs_;
    function_.getargs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void kvRequest::unsafe_arena_set_allocated_getargs(::E477KV::getRequest* getargs) {
  clear_function();
  if (getargs) {
    set_has_getargs();
    function_.getargs_ = getargs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:E477KV.kvRequest.getArgs)
}
inline ::E477KV::getRequest* kvRequest::_internal_mutable_getargs() {
  if (!_internal_has_getargs()) {
    clear_function();
    set_has_getargs();
    function_.getargs_ = CreateMaybeMessage< ::E477KV::getRequest >(GetArena());
  }
  return function_.getargs_;
}
inline ::E477KV::getRequest* kvRequest::mutable_getargs() {
  // @@protoc_insertion_point(field_mutable:E477KV.kvRequest.getArgs)
  return _internal_mutable_getargs();
}

inline bool kvRequest::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void kvRequest::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline kvRequest::FunctionCase kvRequest::function_case() const {
  return kvRequest::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// putRequest

// int32 key = 1;
inline void putRequest::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 putRequest::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 putRequest::key() const {
  // @@protoc_insertion_point(field_get:E477KV.putRequest.key)
  return _internal_key();
}
inline void putRequest::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void putRequest::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:E477KV.putRequest.key)
}

// bytes value = 2;
inline void putRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& putRequest::value() const {
  // @@protoc_insertion_point(field_get:E477KV.putRequest.value)
  return _internal_value();
}
inline void putRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:E477KV.putRequest.value)
}
inline std::string* putRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:E477KV.putRequest.value)
  return _internal_mutable_value();
}
inline const std::string& putRequest::_internal_value() const {
  return value_.Get();
}
inline void putRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void putRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:E477KV.putRequest.value)
}
inline void putRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:E477KV.putRequest.value)
}
inline void putRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:E477KV.putRequest.value)
}
inline std::string* putRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* putRequest::release_value() {
  // @@protoc_insertion_point(field_release:E477KV.putRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void putRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:E477KV.putRequest.value)
}
inline std::string* putRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:E477KV.putRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void putRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:E477KV.putRequest.value)
}

// -------------------------------------------------------------------

// getRequest

// int32 key = 1;
inline void getRequest::clear_key() {
  key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getRequest::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getRequest::key() const {
  // @@protoc_insertion_point(field_get:E477KV.getRequest.key)
  return _internal_key();
}
inline void getRequest::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_ = value;
}
inline void getRequest::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:E477KV.getRequest.key)
}

// -------------------------------------------------------------------

// kvResponse

// uint32 magic = 1;
inline void kvResponse::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvResponse::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvResponse::magic() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.magic)
  return _internal_magic();
}
inline void kvResponse::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void kvResponse::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:E477KV.kvResponse.magic)
}

// uint32 version = 2;
inline void kvResponse::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvResponse::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvResponse::version() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.version)
  return _internal_version();
}
inline void kvResponse::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void kvResponse::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:E477KV.kvResponse.version)
}

// uint32 serial = 3;
inline void kvResponse::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvResponse::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 kvResponse::serial() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.serial)
  return _internal_serial();
}
inline void kvResponse::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void kvResponse::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:E477KV.kvResponse.serial)
}

// .E477KV.putResponse putRes = 4;
inline bool kvResponse::_internal_has_putres() const {
  return function_case() == kPutRes;
}
inline bool kvResponse::has_putres() const {
  return _internal_has_putres();
}
inline void kvResponse::set_has_putres() {
  _oneof_case_[0] = kPutRes;
}
inline void kvResponse::clear_putres() {
  if (_internal_has_putres()) {
    if (GetArena() == nullptr) {
      delete function_.putres_;
    }
    clear_has_function();
  }
}
inline ::E477KV::putResponse* kvResponse::release_putres() {
  // @@protoc_insertion_point(field_release:E477KV.kvResponse.putRes)
  if (_internal_has_putres()) {
    clear_has_function();
      ::E477KV::putResponse* temp = function_.putres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.putres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::E477KV::putResponse& kvResponse::_internal_putres() const {
  return _internal_has_putres()
      ? *function_.putres_
      : *reinterpret_cast< ::E477KV::putResponse*>(&::E477KV::_putResponse_default_instance_);
}
inline const ::E477KV::putResponse& kvResponse::putres() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.putRes)
  return _internal_putres();
}
inline ::E477KV::putResponse* kvResponse::unsafe_arena_release_putres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:E477KV.kvResponse.putRes)
  if (_internal_has_putres()) {
    clear_has_function();
    ::E477KV::putResponse* temp = function_.putres_;
    function_.putres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void kvResponse::unsafe_arena_set_allocated_putres(::E477KV::putResponse* putres) {
  clear_function();
  if (putres) {
    set_has_putres();
    function_.putres_ = putres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:E477KV.kvResponse.putRes)
}
inline ::E477KV::putResponse* kvResponse::_internal_mutable_putres() {
  if (!_internal_has_putres()) {
    clear_function();
    set_has_putres();
    function_.putres_ = CreateMaybeMessage< ::E477KV::putResponse >(GetArena());
  }
  return function_.putres_;
}
inline ::E477KV::putResponse* kvResponse::mutable_putres() {
  // @@protoc_insertion_point(field_mutable:E477KV.kvResponse.putRes)
  return _internal_mutable_putres();
}

// .E477KV.getResponse getRes = 5;
inline bool kvResponse::_internal_has_getres() const {
  return function_case() == kGetRes;
}
inline bool kvResponse::has_getres() const {
  return _internal_has_getres();
}
inline void kvResponse::set_has_getres() {
  _oneof_case_[0] = kGetRes;
}
inline void kvResponse::clear_getres() {
  if (_internal_has_getres()) {
    if (GetArena() == nullptr) {
      delete function_.getres_;
    }
    clear_has_function();
  }
}
inline ::E477KV::getResponse* kvResponse::release_getres() {
  // @@protoc_insertion_point(field_release:E477KV.kvResponse.getRes)
  if (_internal_has_getres()) {
    clear_has_function();
      ::E477KV::getResponse* temp = function_.getres_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    function_.getres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::E477KV::getResponse& kvResponse::_internal_getres() const {
  return _internal_has_getres()
      ? *function_.getres_
      : *reinterpret_cast< ::E477KV::getResponse*>(&::E477KV::_getResponse_default_instance_);
}
inline const ::E477KV::getResponse& kvResponse::getres() const {
  // @@protoc_insertion_point(field_get:E477KV.kvResponse.getRes)
  return _internal_getres();
}
inline ::E477KV::getResponse* kvResponse::unsafe_arena_release_getres() {
  // @@protoc_insertion_point(field_unsafe_arena_release:E477KV.kvResponse.getRes)
  if (_internal_has_getres()) {
    clear_has_function();
    ::E477KV::getResponse* temp = function_.getres_;
    function_.getres_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void kvResponse::unsafe_arena_set_allocated_getres(::E477KV::getResponse* getres) {
  clear_function();
  if (getres) {
    set_has_getres();
    function_.getres_ = getres;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:E477KV.kvResponse.getRes)
}
inline ::E477KV::getResponse* kvResponse::_internal_mutable_getres() {
  if (!_internal_has_getres()) {
    clear_function();
    set_has_getres();
    function_.getres_ = CreateMaybeMessage< ::E477KV::getResponse >(GetArena());
  }
  return function_.getres_;
}
inline ::E477KV::getResponse* kvResponse::mutable_getres() {
  // @@protoc_insertion_point(field_mutable:E477KV.kvResponse.getRes)
  return _internal_mutable_getres();
}

inline bool kvResponse::has_function() const {
  return function_case() != FUNCTION_NOT_SET;
}
inline void kvResponse::clear_has_function() {
  _oneof_case_[0] = FUNCTION_NOT_SET;
}
inline kvResponse::FunctionCase kvResponse::function_case() const {
  return kvResponse::FunctionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// putResponse

// bool status = 1;
inline void putResponse::clear_status() {
  status_ = false;
}
inline bool putResponse::_internal_status() const {
  return status_;
}
inline bool putResponse::status() const {
  // @@protoc_insertion_point(field_get:E477KV.putResponse.status)
  return _internal_status();
}
inline void putResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void putResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:E477KV.putResponse.status)
}

// -------------------------------------------------------------------

// getResponse

// bool status = 1;
inline void getResponse::clear_status() {
  status_ = false;
}
inline bool getResponse::_internal_status() const {
  return status_;
}
inline bool getResponse::status() const {
  // @@protoc_insertion_point(field_get:E477KV.getResponse.status)
  return _internal_status();
}
inline void getResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void getResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:E477KV.getResponse.status)
}

// bytes value = 2;
inline void getResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& getResponse::value() const {
  // @@protoc_insertion_point(field_get:E477KV.getResponse.value)
  return _internal_value();
}
inline void getResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:E477KV.getResponse.value)
}
inline std::string* getResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:E477KV.getResponse.value)
  return _internal_mutable_value();
}
inline const std::string& getResponse::_internal_value() const {
  return value_.Get();
}
inline void getResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void getResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:E477KV.getResponse.value)
}
inline void getResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:E477KV.getResponse.value)
}
inline void getResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:E477KV.getResponse.value)
}
inline std::string* getResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* getResponse::release_value() {
  // @@protoc_insertion_point(field_release:E477KV.getResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:E477KV.getResponse.value)
}
inline std::string* getResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:E477KV.getResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void getResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:E477KV.getResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace E477KV

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_E477KV_2eproto
