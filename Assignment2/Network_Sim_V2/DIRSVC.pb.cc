// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DIRSVC.proto

#include "DIRSVC.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DIRSVC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerRequest_DIRSVC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DIRSVC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerResponse_DIRSVC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DIRSVC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchRequest_DIRSVC_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DIRSVC_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchResponse_DIRSVC_2eproto;
namespace DIRSVC {
class dirSvcRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dirSvcRequest> _instance;
  const ::DIRSVC::registerRequest* registerargs_;
  const ::DIRSVC::searchRequest* searchargs_;
} _dirSvcRequest_default_instance_;
class registerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<registerRequest> _instance;
} _registerRequest_default_instance_;
class searchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<searchRequest> _instance;
} _searchRequest_default_instance_;
class dirSvcResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<dirSvcResponse> _instance;
  const ::DIRSVC::registerResponse* registerres_;
  const ::DIRSVC::searchResponse* searchres_;
} _dirSvcResponse_default_instance_;
class registerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<registerResponse> _instance;
} _registerResponse_default_instance_;
class searchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<searchResponse> _instance;
} _searchResponse_default_instance_;
}  // namespace DIRSVC
static void InitDefaultsscc_info_dirSvcRequest_DIRSVC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DIRSVC::_dirSvcRequest_default_instance_;
    new (ptr) ::DIRSVC::dirSvcRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DIRSVC::dirSvcRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_dirSvcRequest_DIRSVC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_dirSvcRequest_DIRSVC_2eproto}, {
      &scc_info_registerRequest_DIRSVC_2eproto.base,
      &scc_info_searchRequest_DIRSVC_2eproto.base,}};

static void InitDefaultsscc_info_dirSvcResponse_DIRSVC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DIRSVC::_dirSvcResponse_default_instance_;
    new (ptr) ::DIRSVC::dirSvcResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DIRSVC::dirSvcResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_dirSvcResponse_DIRSVC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_dirSvcResponse_DIRSVC_2eproto}, {
      &scc_info_registerResponse_DIRSVC_2eproto.base,
      &scc_info_searchResponse_DIRSVC_2eproto.base,}};

static void InitDefaultsscc_info_registerRequest_DIRSVC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DIRSVC::_registerRequest_default_instance_;
    new (ptr) ::DIRSVC::registerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DIRSVC::registerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerRequest_DIRSVC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_registerRequest_DIRSVC_2eproto}, {}};

static void InitDefaultsscc_info_registerResponse_DIRSVC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DIRSVC::_registerResponse_default_instance_;
    new (ptr) ::DIRSVC::registerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DIRSVC::registerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_registerResponse_DIRSVC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_registerResponse_DIRSVC_2eproto}, {}};

static void InitDefaultsscc_info_searchRequest_DIRSVC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DIRSVC::_searchRequest_default_instance_;
    new (ptr) ::DIRSVC::searchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DIRSVC::searchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchRequest_DIRSVC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_searchRequest_DIRSVC_2eproto}, {}};

static void InitDefaultsscc_info_searchResponse_DIRSVC_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DIRSVC::_searchResponse_default_instance_;
    new (ptr) ::DIRSVC::searchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DIRSVC::searchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_searchResponse_DIRSVC_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_searchResponse_DIRSVC_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DIRSVC_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DIRSVC_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DIRSVC_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DIRSVC_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcRequest, magic_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcRequest, version_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcRequest, serial_),
  offsetof(::DIRSVC::dirSvcRequestDefaultTypeInternal, registerargs_),
  offsetof(::DIRSVC::dirSvcRequestDefaultTypeInternal, searchargs_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcRequest, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::registerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::registerRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::registerRequest, server_name_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::registerRequest, server_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::searchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::searchRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcResponse, magic_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcResponse, version_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcResponse, serial_),
  offsetof(::DIRSVC::dirSvcResponseDefaultTypeInternal, registerres_),
  offsetof(::DIRSVC::dirSvcResponseDefaultTypeInternal, searchres_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::dirSvcResponse, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::registerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::registerResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::searchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DIRSVC::searchResponse, status_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::searchResponse, server_name_),
  PROTOBUF_FIELD_OFFSET(::DIRSVC::searchResponse, server_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DIRSVC::dirSvcRequest)},
  { 11, -1, sizeof(::DIRSVC::registerRequest)},
  { 19, -1, sizeof(::DIRSVC::searchRequest)},
  { 25, -1, sizeof(::DIRSVC::dirSvcResponse)},
  { 36, -1, sizeof(::DIRSVC::registerResponse)},
  { 42, -1, sizeof(::DIRSVC::searchResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DIRSVC::_dirSvcRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DIRSVC::_registerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DIRSVC::_searchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DIRSVC::_dirSvcResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DIRSVC::_registerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DIRSVC::_searchResponse_default_instance_),
};

const char descriptor_table_protodef_DIRSVC_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014DIRSVC.proto\022\006DIRSVC\"\251\001\n\rdirSvcRequest"
  "\022\r\n\005magic\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\022\016\n\006seri"
  "al\030\003 \001(\r\022/\n\014registerArgs\030\004 \001(\0132\027.DIRSVC."
  "registerRequestH\000\022+\n\nsearchArgs\030\005 \001(\0132\025."
  "DIRSVC.searchRequestH\000B\n\n\010function\"Q\n\017re"
  "gisterRequest\022\024\n\014service_name\030\001 \001(\014\022\023\n\013s"
  "erver_name\030\002 \001(\014\022\023\n\013server_port\030\003 \001(\r\"%\n"
  "\rsearchRequest\022\024\n\014service_name\030\001 \001(\014\"\252\001\n"
  "\016dirSvcResponse\022\r\n\005magic\030\001 \001(\r\022\017\n\007versio"
  "n\030\002 \001(\r\022\016\n\006serial\030\003 \001(\r\022/\n\013registerRes\030\004"
  " \001(\0132\030.DIRSVC.registerResponseH\000\022+\n\tsear"
  "chRes\030\005 \001(\0132\026.DIRSVC.searchResponseH\000B\n\n"
  "\010function\"\"\n\020registerResponse\022\016\n\006status\030"
  "\001 \001(\010\"J\n\016searchResponse\022\016\n\006status\030\001 \001(\010\022"
  "\023\n\013server_name\030\002 \001(\014\022\023\n\013server_port\030\003 \001("
  "\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DIRSVC_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DIRSVC_2eproto_sccs[6] = {
  &scc_info_dirSvcRequest_DIRSVC_2eproto.base,
  &scc_info_dirSvcResponse_DIRSVC_2eproto.base,
  &scc_info_registerRequest_DIRSVC_2eproto.base,
  &scc_info_registerResponse_DIRSVC_2eproto.base,
  &scc_info_searchRequest_DIRSVC_2eproto.base,
  &scc_info_searchResponse_DIRSVC_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DIRSVC_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DIRSVC_2eproto = {
  false, false, descriptor_table_protodef_DIRSVC_2eproto, "DIRSVC.proto", 609,
  &descriptor_table_DIRSVC_2eproto_once, descriptor_table_DIRSVC_2eproto_sccs, descriptor_table_DIRSVC_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_DIRSVC_2eproto::offsets,
  file_level_metadata_DIRSVC_2eproto, 6, file_level_enum_descriptors_DIRSVC_2eproto, file_level_service_descriptors_DIRSVC_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DIRSVC_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DIRSVC_2eproto)), true);
namespace DIRSVC {

// ===================================================================

void dirSvcRequest::InitAsDefaultInstance() {
  ::DIRSVC::_dirSvcRequest_default_instance_.registerargs_ = const_cast< ::DIRSVC::registerRequest*>(
      ::DIRSVC::registerRequest::internal_default_instance());
  ::DIRSVC::_dirSvcRequest_default_instance_.searchargs_ = const_cast< ::DIRSVC::searchRequest*>(
      ::DIRSVC::searchRequest::internal_default_instance());
}
class dirSvcRequest::_Internal {
 public:
  static const ::DIRSVC::registerRequest& registerargs(const dirSvcRequest* msg);
  static const ::DIRSVC::searchRequest& searchargs(const dirSvcRequest* msg);
};

const ::DIRSVC::registerRequest&
dirSvcRequest::_Internal::registerargs(const dirSvcRequest* msg) {
  return *msg->function_.registerargs_;
}
const ::DIRSVC::searchRequest&
dirSvcRequest::_Internal::searchargs(const dirSvcRequest* msg) {
  return *msg->function_.searchargs_;
}
void dirSvcRequest::set_allocated_registerargs(::DIRSVC::registerRequest* registerargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (registerargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(registerargs);
    if (message_arena != submessage_arena) {
      registerargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerargs, submessage_arena);
    }
    set_has_registerargs();
    function_.registerargs_ = registerargs;
  }
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.dirSvcRequest.registerArgs)
}
void dirSvcRequest::set_allocated_searchargs(::DIRSVC::searchRequest* searchargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (searchargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchargs);
    if (message_arena != submessage_arena) {
      searchargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchargs, submessage_arena);
    }
    set_has_searchargs();
    function_.searchargs_ = searchargs;
  }
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.dirSvcRequest.searchArgs)
}
dirSvcRequest::dirSvcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DIRSVC.dirSvcRequest)
}
dirSvcRequest::dirSvcRequest(const dirSvcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
  switch (from.function_case()) {
    case kRegisterArgs: {
      _internal_mutable_registerargs()->::DIRSVC::registerRequest::MergeFrom(from._internal_registerargs());
      break;
    }
    case kSearchArgs: {
      _internal_mutable_searchargs()->::DIRSVC::searchRequest::MergeFrom(from._internal_searchargs());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DIRSVC.dirSvcRequest)
}

void dirSvcRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dirSvcRequest_DIRSVC_2eproto.base);
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
}

dirSvcRequest::~dirSvcRequest() {
  // @@protoc_insertion_point(destructor:DIRSVC.dirSvcRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dirSvcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void dirSvcRequest::ArenaDtor(void* object) {
  dirSvcRequest* _this = reinterpret_cast< dirSvcRequest* >(object);
  (void)_this;
}
void dirSvcRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dirSvcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dirSvcRequest& dirSvcRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dirSvcRequest_DIRSVC_2eproto.base);
  return *internal_default_instance();
}


void dirSvcRequest::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:DIRSVC.dirSvcRequest)
  switch (function_case()) {
    case kRegisterArgs: {
      if (GetArena() == nullptr) {
        delete function_.registerargs_;
      }
      break;
    }
    case kSearchArgs: {
      if (GetArena() == nullptr) {
        delete function_.searchargs_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void dirSvcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DIRSVC.dirSvcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dirSvcRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DIRSVC.registerRequest registerArgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DIRSVC.searchRequest searchArgs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dirSvcRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DIRSVC.dirSvcRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  // .DIRSVC.registerRequest registerArgs = 4;
  if (_internal_has_registerargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::registerargs(this), target, stream);
  }

  // .DIRSVC.searchRequest searchArgs = 5;
  if (_internal_has_searchargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::searchargs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DIRSVC.dirSvcRequest)
  return target;
}

size_t dirSvcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DIRSVC.dirSvcRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  switch (function_case()) {
    // .DIRSVC.registerRequest registerArgs = 4;
    case kRegisterArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.registerargs_);
      break;
    }
    // .DIRSVC.searchRequest searchArgs = 5;
    case kSearchArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.searchargs_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dirSvcRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DIRSVC.dirSvcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const dirSvcRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dirSvcRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DIRSVC.dirSvcRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DIRSVC.dirSvcRequest)
    MergeFrom(*source);
  }
}

void dirSvcRequest::MergeFrom(const dirSvcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DIRSVC.dirSvcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  switch (from.function_case()) {
    case kRegisterArgs: {
      _internal_mutable_registerargs()->::DIRSVC::registerRequest::MergeFrom(from._internal_registerargs());
      break;
    }
    case kSearchArgs: {
      _internal_mutable_searchargs()->::DIRSVC::searchRequest::MergeFrom(from._internal_searchargs());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
}

void dirSvcRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DIRSVC.dirSvcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dirSvcRequest::CopyFrom(const dirSvcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DIRSVC.dirSvcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dirSvcRequest::IsInitialized() const {
  return true;
}

void dirSvcRequest::InternalSwap(dirSvcRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dirSvcRequest, serial_)
      + sizeof(dirSvcRequest::serial_)
      - PROTOBUF_FIELD_OFFSET(dirSvcRequest, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata dirSvcRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void registerRequest::InitAsDefaultInstance() {
}
class registerRequest::_Internal {
 public:
};

registerRequest::registerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DIRSVC.registerRequest)
}
registerRequest::registerRequest(const registerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_name(),
      GetArena());
  }
  server_port_ = from.server_port_;
  // @@protoc_insertion_point(copy_constructor:DIRSVC.registerRequest)
}

void registerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_registerRequest_DIRSVC_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_port_ = 0u;
}

registerRequest::~registerRequest() {
  // @@protoc_insertion_point(destructor:DIRSVC.registerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void registerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void registerRequest::ArenaDtor(void* object) {
  registerRequest* _this = reinterpret_cast< registerRequest* >(object);
  (void)_this;
}
void registerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const registerRequest& registerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_registerRequest_DIRSVC_2eproto.base);
  return *internal_default_instance();
}


void registerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DIRSVC.registerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DIRSVC.registerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DIRSVC.registerRequest)
  return target;
}

size_t registerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DIRSVC.registerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_service_name());
  }

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_name());
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DIRSVC.registerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const registerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<registerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DIRSVC.registerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DIRSVC.registerRequest)
    MergeFrom(*source);
  }
}

void registerRequest::MergeFrom(const registerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DIRSVC.registerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.server_name().size() > 0) {
    _internal_set_server_name(from._internal_server_name());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
}

void registerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DIRSVC.registerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerRequest::CopyFrom(const registerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DIRSVC.registerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerRequest::IsInitialized() const {
  return true;
}

void registerRequest::InternalSwap(registerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(server_port_, other->server_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void searchRequest::InitAsDefaultInstance() {
}
class searchRequest::_Internal {
 public:
};

searchRequest::searchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DIRSVC.searchRequest)
}
searchRequest::searchRequest(const searchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DIRSVC.searchRequest)
}

void searchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_searchRequest_DIRSVC_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

searchRequest::~searchRequest() {
  // @@protoc_insertion_point(destructor:DIRSVC.searchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void searchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchRequest::ArenaDtor(void* object) {
  searchRequest* _this = reinterpret_cast< searchRequest* >(object);
  (void)_this;
}
void searchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const searchRequest& searchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_searchRequest_DIRSVC_2eproto.base);
  return *internal_default_instance();
}


void searchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DIRSVC.searchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DIRSVC.searchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DIRSVC.searchRequest)
  return target;
}

size_t searchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DIRSVC.searchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_service_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void searchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DIRSVC.searchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const searchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<searchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DIRSVC.searchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DIRSVC.searchRequest)
    MergeFrom(*source);
  }
}

void searchRequest::MergeFrom(const searchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DIRSVC.searchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
}

void searchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DIRSVC.searchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void searchRequest::CopyFrom(const searchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DIRSVC.searchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchRequest::IsInitialized() const {
  return true;
}

void searchRequest::InternalSwap(searchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata searchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void dirSvcResponse::InitAsDefaultInstance() {
  ::DIRSVC::_dirSvcResponse_default_instance_.registerres_ = const_cast< ::DIRSVC::registerResponse*>(
      ::DIRSVC::registerResponse::internal_default_instance());
  ::DIRSVC::_dirSvcResponse_default_instance_.searchres_ = const_cast< ::DIRSVC::searchResponse*>(
      ::DIRSVC::searchResponse::internal_default_instance());
}
class dirSvcResponse::_Internal {
 public:
  static const ::DIRSVC::registerResponse& registerres(const dirSvcResponse* msg);
  static const ::DIRSVC::searchResponse& searchres(const dirSvcResponse* msg);
};

const ::DIRSVC::registerResponse&
dirSvcResponse::_Internal::registerres(const dirSvcResponse* msg) {
  return *msg->function_.registerres_;
}
const ::DIRSVC::searchResponse&
dirSvcResponse::_Internal::searchres(const dirSvcResponse* msg) {
  return *msg->function_.searchres_;
}
void dirSvcResponse::set_allocated_registerres(::DIRSVC::registerResponse* registerres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (registerres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(registerres);
    if (message_arena != submessage_arena) {
      registerres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerres, submessage_arena);
    }
    set_has_registerres();
    function_.registerres_ = registerres;
  }
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.dirSvcResponse.registerRes)
}
void dirSvcResponse::set_allocated_searchres(::DIRSVC::searchResponse* searchres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (searchres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchres);
    if (message_arena != submessage_arena) {
      searchres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchres, submessage_arena);
    }
    set_has_searchres();
    function_.searchres_ = searchres;
  }
  // @@protoc_insertion_point(field_set_allocated:DIRSVC.dirSvcResponse.searchRes)
}
dirSvcResponse::dirSvcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DIRSVC.dirSvcResponse)
}
dirSvcResponse::dirSvcResponse(const dirSvcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
  switch (from.function_case()) {
    case kRegisterRes: {
      _internal_mutable_registerres()->::DIRSVC::registerResponse::MergeFrom(from._internal_registerres());
      break;
    }
    case kSearchRes: {
      _internal_mutable_searchres()->::DIRSVC::searchResponse::MergeFrom(from._internal_searchres());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DIRSVC.dirSvcResponse)
}

void dirSvcResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_dirSvcResponse_DIRSVC_2eproto.base);
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
}

dirSvcResponse::~dirSvcResponse() {
  // @@protoc_insertion_point(destructor:DIRSVC.dirSvcResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void dirSvcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void dirSvcResponse::ArenaDtor(void* object) {
  dirSvcResponse* _this = reinterpret_cast< dirSvcResponse* >(object);
  (void)_this;
}
void dirSvcResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void dirSvcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const dirSvcResponse& dirSvcResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_dirSvcResponse_DIRSVC_2eproto.base);
  return *internal_default_instance();
}


void dirSvcResponse::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:DIRSVC.dirSvcResponse)
  switch (function_case()) {
    case kRegisterRes: {
      if (GetArena() == nullptr) {
        delete function_.registerres_;
      }
      break;
    }
    case kSearchRes: {
      if (GetArena() == nullptr) {
        delete function_.searchres_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void dirSvcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DIRSVC.dirSvcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* dirSvcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DIRSVC.registerResponse registerRes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DIRSVC.searchResponse searchRes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_searchres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* dirSvcResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DIRSVC.dirSvcResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  // .DIRSVC.registerResponse registerRes = 4;
  if (_internal_has_registerres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::registerres(this), target, stream);
  }

  // .DIRSVC.searchResponse searchRes = 5;
  if (_internal_has_searchres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::searchres(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DIRSVC.dirSvcResponse)
  return target;
}

size_t dirSvcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DIRSVC.dirSvcResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  switch (function_case()) {
    // .DIRSVC.registerResponse registerRes = 4;
    case kRegisterRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.registerres_);
      break;
    }
    // .DIRSVC.searchResponse searchRes = 5;
    case kSearchRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.searchres_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void dirSvcResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DIRSVC.dirSvcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const dirSvcResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<dirSvcResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DIRSVC.dirSvcResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DIRSVC.dirSvcResponse)
    MergeFrom(*source);
  }
}

void dirSvcResponse::MergeFrom(const dirSvcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DIRSVC.dirSvcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  switch (from.function_case()) {
    case kRegisterRes: {
      _internal_mutable_registerres()->::DIRSVC::registerResponse::MergeFrom(from._internal_registerres());
      break;
    }
    case kSearchRes: {
      _internal_mutable_searchres()->::DIRSVC::searchResponse::MergeFrom(from._internal_searchres());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
}

void dirSvcResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DIRSVC.dirSvcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dirSvcResponse::CopyFrom(const dirSvcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DIRSVC.dirSvcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dirSvcResponse::IsInitialized() const {
  return true;
}

void dirSvcResponse::InternalSwap(dirSvcResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(dirSvcResponse, serial_)
      + sizeof(dirSvcResponse::serial_)
      - PROTOBUF_FIELD_OFFSET(dirSvcResponse, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata dirSvcResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void registerResponse::InitAsDefaultInstance() {
}
class registerResponse::_Internal {
 public:
};

registerResponse::registerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DIRSVC.registerResponse)
}
registerResponse::registerResponse(const registerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:DIRSVC.registerResponse)
}

void registerResponse::SharedCtor() {
  status_ = false;
}

registerResponse::~registerResponse() {
  // @@protoc_insertion_point(destructor:DIRSVC.registerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void registerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void registerResponse::ArenaDtor(void* object) {
  registerResponse* _this = reinterpret_cast< registerResponse* >(object);
  (void)_this;
}
void registerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void registerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const registerResponse& registerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_registerResponse_DIRSVC_2eproto.base);
  return *internal_default_instance();
}


void registerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DIRSVC.registerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* registerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DIRSVC.registerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DIRSVC.registerResponse)
  return target;
}

size_t registerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DIRSVC.registerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void registerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DIRSVC.registerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const registerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<registerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DIRSVC.registerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DIRSVC.registerResponse)
    MergeFrom(*source);
  }
}

void registerResponse::MergeFrom(const registerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DIRSVC.registerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void registerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DIRSVC.registerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void registerResponse::CopyFrom(const registerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DIRSVC.registerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerResponse::IsInitialized() const {
  return true;
}

void registerResponse::InternalSwap(registerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void searchResponse::InitAsDefaultInstance() {
}
class searchResponse::_Internal {
 public:
};

searchResponse::searchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DIRSVC.searchResponse)
}
searchResponse::searchResponse(const searchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server_name(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_port_) -
    reinterpret_cast<char*>(&status_)) + sizeof(server_port_));
  // @@protoc_insertion_point(copy_constructor:DIRSVC.searchResponse)
}

void searchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_searchResponse_DIRSVC_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&status_)) + sizeof(server_port_));
}

searchResponse::~searchResponse() {
  // @@protoc_insertion_point(destructor:DIRSVC.searchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void searchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void searchResponse::ArenaDtor(void* object) {
  searchResponse* _this = reinterpret_cast< searchResponse* >(object);
  (void)_this;
}
void searchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const searchResponse& searchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_searchResponse_DIRSVC_2eproto.base);
  return *internal_default_instance();
}


void searchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DIRSVC.searchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_port_) -
      reinterpret_cast<char*>(&status_)) + sizeof(server_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* searchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DIRSVC.searchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DIRSVC.searchResponse)
  return target;
}

size_t searchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DIRSVC.searchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_name());
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // uint32 server_port = 3;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void searchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DIRSVC.searchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const searchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<searchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DIRSVC.searchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DIRSVC.searchResponse)
    MergeFrom(*source);
  }
}

void searchResponse::MergeFrom(const searchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DIRSVC.searchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {
    _internal_set_server_name(from._internal_server_name());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
}

void searchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DIRSVC.searchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void searchResponse::CopyFrom(const searchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DIRSVC.searchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchResponse::IsInitialized() const {
  return true;
}

void searchResponse::InternalSwap(searchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(searchResponse, server_port_)
      + sizeof(searchResponse::server_port_)
      - PROTOBUF_FIELD_OFFSET(searchResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata searchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DIRSVC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DIRSVC::dirSvcRequest* Arena::CreateMaybeMessage< ::DIRSVC::dirSvcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DIRSVC::dirSvcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DIRSVC::registerRequest* Arena::CreateMaybeMessage< ::DIRSVC::registerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DIRSVC::registerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DIRSVC::searchRequest* Arena::CreateMaybeMessage< ::DIRSVC::searchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DIRSVC::searchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DIRSVC::dirSvcResponse* Arena::CreateMaybeMessage< ::DIRSVC::dirSvcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DIRSVC::dirSvcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DIRSVC::registerResponse* Arena::CreateMaybeMessage< ::DIRSVC::registerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DIRSVC::registerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DIRSVC::searchResponse* Arena::CreateMaybeMessage< ::DIRSVC::searchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DIRSVC::searchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
