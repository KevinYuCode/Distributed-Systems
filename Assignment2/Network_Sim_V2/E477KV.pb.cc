// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E477KV.proto

#include "E477KV.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_E477KV_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getRequest_E477KV_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E477KV_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getResponse_E477KV_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E477KV_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_putRequest_E477KV_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_E477KV_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_putResponse_E477KV_2eproto;
namespace E477KV {
class kvRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<kvRequest> _instance;
  const ::E477KV::putRequest* putargs_;
  const ::E477KV::getRequest* getargs_;
} _kvRequest_default_instance_;
class putRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<putRequest> _instance;
} _putRequest_default_instance_;
class getRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getRequest> _instance;
} _getRequest_default_instance_;
class kvResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<kvResponse> _instance;
  const ::E477KV::putResponse* putres_;
  const ::E477KV::getResponse* getres_;
} _kvResponse_default_instance_;
class putResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<putResponse> _instance;
} _putResponse_default_instance_;
class getResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getResponse> _instance;
} _getResponse_default_instance_;
}  // namespace E477KV
static void InitDefaultsscc_info_getRequest_E477KV_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::E477KV::_getRequest_default_instance_;
    new (ptr) ::E477KV::getRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::E477KV::getRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getRequest_E477KV_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_getRequest_E477KV_2eproto}, {}};

static void InitDefaultsscc_info_getResponse_E477KV_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::E477KV::_getResponse_default_instance_;
    new (ptr) ::E477KV::getResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::E477KV::getResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getResponse_E477KV_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_getResponse_E477KV_2eproto}, {}};

static void InitDefaultsscc_info_kvRequest_E477KV_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::E477KV::_kvRequest_default_instance_;
    new (ptr) ::E477KV::kvRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::E477KV::kvRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_kvRequest_E477KV_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_kvRequest_E477KV_2eproto}, {
      &scc_info_putRequest_E477KV_2eproto.base,
      &scc_info_getRequest_E477KV_2eproto.base,}};

static void InitDefaultsscc_info_kvResponse_E477KV_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::E477KV::_kvResponse_default_instance_;
    new (ptr) ::E477KV::kvResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::E477KV::kvResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_kvResponse_E477KV_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_kvResponse_E477KV_2eproto}, {
      &scc_info_putResponse_E477KV_2eproto.base,
      &scc_info_getResponse_E477KV_2eproto.base,}};

static void InitDefaultsscc_info_putRequest_E477KV_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::E477KV::_putRequest_default_instance_;
    new (ptr) ::E477KV::putRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::E477KV::putRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_putRequest_E477KV_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_putRequest_E477KV_2eproto}, {}};

static void InitDefaultsscc_info_putResponse_E477KV_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::E477KV::_putResponse_default_instance_;
    new (ptr) ::E477KV::putResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::E477KV::putResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_putResponse_E477KV_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_putResponse_E477KV_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_E477KV_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_E477KV_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_E477KV_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_E477KV_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::E477KV::kvRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::E477KV::kvRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::E477KV::kvRequest, magic_),
  PROTOBUF_FIELD_OFFSET(::E477KV::kvRequest, version_),
  PROTOBUF_FIELD_OFFSET(::E477KV::kvRequest, serial_),
  offsetof(::E477KV::kvRequestDefaultTypeInternal, putargs_),
  offsetof(::E477KV::kvRequestDefaultTypeInternal, getargs_),
  PROTOBUF_FIELD_OFFSET(::E477KV::kvRequest, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::E477KV::putRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::E477KV::putRequest, key_),
  PROTOBUF_FIELD_OFFSET(::E477KV::putRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::E477KV::getRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::E477KV::getRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::E477KV::kvResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::E477KV::kvResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::E477KV::kvResponse, magic_),
  PROTOBUF_FIELD_OFFSET(::E477KV::kvResponse, version_),
  PROTOBUF_FIELD_OFFSET(::E477KV::kvResponse, serial_),
  offsetof(::E477KV::kvResponseDefaultTypeInternal, putres_),
  offsetof(::E477KV::kvResponseDefaultTypeInternal, getres_),
  PROTOBUF_FIELD_OFFSET(::E477KV::kvResponse, function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::E477KV::putResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::E477KV::putResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::E477KV::getResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::E477KV::getResponse, status_),
  PROTOBUF_FIELD_OFFSET(::E477KV::getResponse, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::E477KV::kvRequest)},
  { 11, -1, sizeof(::E477KV::putRequest)},
  { 18, -1, sizeof(::E477KV::getRequest)},
  { 24, -1, sizeof(::E477KV::kvResponse)},
  { 35, -1, sizeof(::E477KV::putResponse)},
  { 41, -1, sizeof(::E477KV::getResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::E477KV::_kvRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::E477KV::_putRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::E477KV::_getRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::E477KV::_kvResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::E477KV::_putResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::E477KV::_getResponse_default_instance_),
};

const char descriptor_table_protodef_E477KV_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014E477KV.proto\022\006E477KV\"\225\001\n\tkvRequest\022\r\n\005"
  "magic\030\001 \001(\r\022\017\n\007version\030\002 \001(\r\022\016\n\006serial\030\003"
  " \001(\r\022%\n\007putArgs\030\004 \001(\0132\022.E477KV.putReques"
  "tH\000\022%\n\007getArgs\030\005 \001(\0132\022.E477KV.getRequest"
  "H\000B\n\n\010function\"(\n\nputRequest\022\013\n\003key\030\001 \001("
  "\005\022\r\n\005value\030\002 \001(\014\"\031\n\ngetRequest\022\013\n\003key\030\001 "
  "\001(\005\"\226\001\n\nkvResponse\022\r\n\005magic\030\001 \001(\r\022\017\n\007ver"
  "sion\030\002 \001(\r\022\016\n\006serial\030\003 \001(\r\022%\n\006putRes\030\004 \001"
  "(\0132\023.E477KV.putResponseH\000\022%\n\006getRes\030\005 \001("
  "\0132\023.E477KV.getResponseH\000B\n\n\010function\"\035\n\013"
  "putResponse\022\016\n\006status\030\001 \001(\010\",\n\013getRespon"
  "se\022\016\n\006status\030\001 \001(\010\022\r\n\005value\030\002 \001(\014b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_E477KV_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_E477KV_2eproto_sccs[6] = {
  &scc_info_getRequest_E477KV_2eproto.base,
  &scc_info_getResponse_E477KV_2eproto.base,
  &scc_info_kvRequest_E477KV_2eproto.base,
  &scc_info_kvResponse_E477KV_2eproto.base,
  &scc_info_putRequest_E477KV_2eproto.base,
  &scc_info_putResponse_E477KV_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_E477KV_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_E477KV_2eproto = {
  false, false, descriptor_table_protodef_E477KV_2eproto, "E477KV.proto", 481,
  &descriptor_table_E477KV_2eproto_once, descriptor_table_E477KV_2eproto_sccs, descriptor_table_E477KV_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_E477KV_2eproto::offsets,
  file_level_metadata_E477KV_2eproto, 6, file_level_enum_descriptors_E477KV_2eproto, file_level_service_descriptors_E477KV_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_E477KV_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_E477KV_2eproto)), true);
namespace E477KV {

// ===================================================================

void kvRequest::InitAsDefaultInstance() {
  ::E477KV::_kvRequest_default_instance_.putargs_ = const_cast< ::E477KV::putRequest*>(
      ::E477KV::putRequest::internal_default_instance());
  ::E477KV::_kvRequest_default_instance_.getargs_ = const_cast< ::E477KV::getRequest*>(
      ::E477KV::getRequest::internal_default_instance());
}
class kvRequest::_Internal {
 public:
  static const ::E477KV::putRequest& putargs(const kvRequest* msg);
  static const ::E477KV::getRequest& getargs(const kvRequest* msg);
};

const ::E477KV::putRequest&
kvRequest::_Internal::putargs(const kvRequest* msg) {
  return *msg->function_.putargs_;
}
const ::E477KV::getRequest&
kvRequest::_Internal::getargs(const kvRequest* msg) {
  return *msg->function_.getargs_;
}
void kvRequest::set_allocated_putargs(::E477KV::putRequest* putargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (putargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(putargs);
    if (message_arena != submessage_arena) {
      putargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, putargs, submessage_arena);
    }
    set_has_putargs();
    function_.putargs_ = putargs;
  }
  // @@protoc_insertion_point(field_set_allocated:E477KV.kvRequest.putArgs)
}
void kvRequest::set_allocated_getargs(::E477KV::getRequest* getargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (getargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getargs);
    if (message_arena != submessage_arena) {
      getargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getargs, submessage_arena);
    }
    set_has_getargs();
    function_.getargs_ = getargs;
  }
  // @@protoc_insertion_point(field_set_allocated:E477KV.kvRequest.getArgs)
}
kvRequest::kvRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:E477KV.kvRequest)
}
kvRequest::kvRequest(const kvRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
  switch (from.function_case()) {
    case kPutArgs: {
      _internal_mutable_putargs()->::E477KV::putRequest::MergeFrom(from._internal_putargs());
      break;
    }
    case kGetArgs: {
      _internal_mutable_getargs()->::E477KV::getRequest::MergeFrom(from._internal_getargs());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:E477KV.kvRequest)
}

void kvRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_kvRequest_E477KV_2eproto.base);
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
}

kvRequest::~kvRequest() {
  // @@protoc_insertion_point(destructor:E477KV.kvRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void kvRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void kvRequest::ArenaDtor(void* object) {
  kvRequest* _this = reinterpret_cast< kvRequest* >(object);
  (void)_this;
}
void kvRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void kvRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const kvRequest& kvRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_kvRequest_E477KV_2eproto.base);
  return *internal_default_instance();
}


void kvRequest::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:E477KV.kvRequest)
  switch (function_case()) {
    case kPutArgs: {
      if (GetArena() == nullptr) {
        delete function_.putargs_;
      }
      break;
    }
    case kGetArgs: {
      if (GetArena() == nullptr) {
        delete function_.getargs_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void kvRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:E477KV.kvRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* kvRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .E477KV.putRequest putArgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_putargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .E477KV.getRequest getArgs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* kvRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:E477KV.kvRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  // .E477KV.putRequest putArgs = 4;
  if (_internal_has_putargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::putargs(this), target, stream);
  }

  // .E477KV.getRequest getArgs = 5;
  if (_internal_has_getargs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::getargs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:E477KV.kvRequest)
  return target;
}

size_t kvRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:E477KV.kvRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  switch (function_case()) {
    // .E477KV.putRequest putArgs = 4;
    case kPutArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.putargs_);
      break;
    }
    // .E477KV.getRequest getArgs = 5;
    case kGetArgs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.getargs_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void kvRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E477KV.kvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const kvRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<kvRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E477KV.kvRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E477KV.kvRequest)
    MergeFrom(*source);
  }
}

void kvRequest::MergeFrom(const kvRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E477KV.kvRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  switch (from.function_case()) {
    case kPutArgs: {
      _internal_mutable_putargs()->::E477KV::putRequest::MergeFrom(from._internal_putargs());
      break;
    }
    case kGetArgs: {
      _internal_mutable_getargs()->::E477KV::getRequest::MergeFrom(from._internal_getargs());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
}

void kvRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E477KV.kvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kvRequest::CopyFrom(const kvRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E477KV.kvRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kvRequest::IsInitialized() const {
  return true;
}

void kvRequest::InternalSwap(kvRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(kvRequest, serial_)
      + sizeof(kvRequest::serial_)
      - PROTOBUF_FIELD_OFFSET(kvRequest, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata kvRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void putRequest::InitAsDefaultInstance() {
}
class putRequest::_Internal {
 public:
};

putRequest::putRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:E477KV.putRequest)
}
putRequest::putRequest(const putRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:E477KV.putRequest)
}

void putRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_putRequest_E477KV_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0;
}

putRequest::~putRequest() {
  // @@protoc_insertion_point(destructor:E477KV.putRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void putRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void putRequest::ArenaDtor(void* object) {
  putRequest* _this = reinterpret_cast< putRequest* >(object);
  (void)_this;
}
void putRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void putRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const putRequest& putRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_putRequest_E477KV_2eproto.base);
  return *internal_default_instance();
}


void putRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:E477KV.putRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* putRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* putRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:E477KV.putRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:E477KV.putRequest)
  return target;
}

size_t putRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:E477KV.putRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void putRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E477KV.putRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const putRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<putRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E477KV.putRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E477KV.putRequest)
    MergeFrom(*source);
  }
}

void putRequest::MergeFrom(const putRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E477KV.putRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void putRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E477KV.putRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void putRequest::CopyFrom(const putRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E477KV.putRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool putRequest::IsInitialized() const {
  return true;
}

void putRequest::InternalSwap(putRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata putRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getRequest::InitAsDefaultInstance() {
}
class getRequest::_Internal {
 public:
};

getRequest::getRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:E477KV.getRequest)
}
getRequest::getRequest(const getRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:E477KV.getRequest)
}

void getRequest::SharedCtor() {
  key_ = 0;
}

getRequest::~getRequest() {
  // @@protoc_insertion_point(destructor:E477KV.getRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void getRequest::ArenaDtor(void* object) {
  getRequest* _this = reinterpret_cast< getRequest* >(object);
  (void)_this;
}
void getRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getRequest& getRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getRequest_E477KV_2eproto.base);
  return *internal_default_instance();
}


void getRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:E477KV.getRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:E477KV.getRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:E477KV.getRequest)
  return target;
}

size_t getRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:E477KV.getRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E477KV.getRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E477KV.getRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E477KV.getRequest)
    MergeFrom(*source);
  }
}

void getRequest::MergeFrom(const getRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E477KV.getRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
}

void getRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E477KV.getRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getRequest::CopyFrom(const getRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E477KV.getRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getRequest::IsInitialized() const {
  return true;
}

void getRequest::InternalSwap(getRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void kvResponse::InitAsDefaultInstance() {
  ::E477KV::_kvResponse_default_instance_.putres_ = const_cast< ::E477KV::putResponse*>(
      ::E477KV::putResponse::internal_default_instance());
  ::E477KV::_kvResponse_default_instance_.getres_ = const_cast< ::E477KV::getResponse*>(
      ::E477KV::getResponse::internal_default_instance());
}
class kvResponse::_Internal {
 public:
  static const ::E477KV::putResponse& putres(const kvResponse* msg);
  static const ::E477KV::getResponse& getres(const kvResponse* msg);
};

const ::E477KV::putResponse&
kvResponse::_Internal::putres(const kvResponse* msg) {
  return *msg->function_.putres_;
}
const ::E477KV::getResponse&
kvResponse::_Internal::getres(const kvResponse* msg) {
  return *msg->function_.getres_;
}
void kvResponse::set_allocated_putres(::E477KV::putResponse* putres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (putres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(putres);
    if (message_arena != submessage_arena) {
      putres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, putres, submessage_arena);
    }
    set_has_putres();
    function_.putres_ = putres;
  }
  // @@protoc_insertion_point(field_set_allocated:E477KV.kvResponse.putRes)
}
void kvResponse::set_allocated_getres(::E477KV::getResponse* getres) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_function();
  if (getres) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getres);
    if (message_arena != submessage_arena) {
      getres = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getres, submessage_arena);
    }
    set_has_getres();
    function_.getres_ = getres;
  }
  // @@protoc_insertion_point(field_set_allocated:E477KV.kvResponse.getRes)
}
kvResponse::kvResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:E477KV.kvResponse)
}
kvResponse::kvResponse(const kvResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
  switch (from.function_case()) {
    case kPutRes: {
      _internal_mutable_putres()->::E477KV::putResponse::MergeFrom(from._internal_putres());
      break;
    }
    case kGetRes: {
      _internal_mutable_getres()->::E477KV::getResponse::MergeFrom(from._internal_getres());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:E477KV.kvResponse)
}

void kvResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_kvResponse_E477KV_2eproto.base);
  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_has_function();
}

kvResponse::~kvResponse() {
  // @@protoc_insertion_point(destructor:E477KV.kvResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void kvResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_function()) {
    clear_function();
  }
}

void kvResponse::ArenaDtor(void* object) {
  kvResponse* _this = reinterpret_cast< kvResponse* >(object);
  (void)_this;
}
void kvResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void kvResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const kvResponse& kvResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_kvResponse_E477KV_2eproto.base);
  return *internal_default_instance();
}


void kvResponse::clear_function() {
// @@protoc_insertion_point(one_of_clear_start:E477KV.kvResponse)
  switch (function_case()) {
    case kPutRes: {
      if (GetArena() == nullptr) {
        delete function_.putres_;
      }
      break;
    }
    case kGetRes: {
      if (GetArena() == nullptr) {
        delete function_.getres_;
      }
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNCTION_NOT_SET;
}


void kvResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:E477KV.kvResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(serial_));
  clear_function();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* kvResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .E477KV.putResponse putRes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_putres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .E477KV.getResponse getRes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getres(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* kvResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:E477KV.kvResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial(), target);
  }

  // .E477KV.putResponse putRes = 4;
  if (_internal_has_putres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::putres(this), target, stream);
  }

  // .E477KV.getResponse getRes = 5;
  if (_internal_has_getres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::getres(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:E477KV.kvResponse)
  return target;
}

size_t kvResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:E477KV.kvResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 serial = 3;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial());
  }

  switch (function_case()) {
    // .E477KV.putResponse putRes = 4;
    case kPutRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.putres_);
      break;
    }
    // .E477KV.getResponse getRes = 5;
    case kGetRes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_.getres_);
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void kvResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E477KV.kvResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const kvResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<kvResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E477KV.kvResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E477KV.kvResponse)
    MergeFrom(*source);
  }
}

void kvResponse::MergeFrom(const kvResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E477KV.kvResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  switch (from.function_case()) {
    case kPutRes: {
      _internal_mutable_putres()->::E477KV::putResponse::MergeFrom(from._internal_putres());
      break;
    }
    case kGetRes: {
      _internal_mutable_getres()->::E477KV::getResponse::MergeFrom(from._internal_getres());
      break;
    }
    case FUNCTION_NOT_SET: {
      break;
    }
  }
}

void kvResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E477KV.kvResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kvResponse::CopyFrom(const kvResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E477KV.kvResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kvResponse::IsInitialized() const {
  return true;
}

void kvResponse::InternalSwap(kvResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(kvResponse, serial_)
      + sizeof(kvResponse::serial_)
      - PROTOBUF_FIELD_OFFSET(kvResponse, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
  swap(function_, other->function_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata kvResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void putResponse::InitAsDefaultInstance() {
}
class putResponse::_Internal {
 public:
};

putResponse::putResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:E477KV.putResponse)
}
putResponse::putResponse(const putResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:E477KV.putResponse)
}

void putResponse::SharedCtor() {
  status_ = false;
}

putResponse::~putResponse() {
  // @@protoc_insertion_point(destructor:E477KV.putResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void putResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void putResponse::ArenaDtor(void* object) {
  putResponse* _this = reinterpret_cast< putResponse* >(object);
  (void)_this;
}
void putResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void putResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const putResponse& putResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_putResponse_E477KV_2eproto.base);
  return *internal_default_instance();
}


void putResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:E477KV.putResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* putResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* putResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:E477KV.putResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:E477KV.putResponse)
  return target;
}

size_t putResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:E477KV.putResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void putResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E477KV.putResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const putResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<putResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E477KV.putResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E477KV.putResponse)
    MergeFrom(*source);
  }
}

void putResponse::MergeFrom(const putResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E477KV.putResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void putResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E477KV.putResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void putResponse::CopyFrom(const putResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E477KV.putResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool putResponse::IsInitialized() const {
  return true;
}

void putResponse::InternalSwap(putResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata putResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getResponse::InitAsDefaultInstance() {
}
class getResponse::_Internal {
 public:
};

getResponse::getResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:E477KV.getResponse)
}
getResponse::getResponse(const getResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:E477KV.getResponse)
}

void getResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getResponse_E477KV_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = false;
}

getResponse::~getResponse() {
  // @@protoc_insertion_point(destructor:E477KV.getResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getResponse::ArenaDtor(void* object) {
  getResponse* _this = reinterpret_cast< getResponse* >(object);
  (void)_this;
}
void getResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getResponse& getResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getResponse_E477KV_2eproto.base);
  return *internal_default_instance();
}


void getResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:E477KV.getResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:E477KV.getResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:E477KV.getResponse)
  return target;
}

size_t getResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:E477KV.getResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E477KV.getResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const getResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E477KV.getResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E477KV.getResponse)
    MergeFrom(*source);
  }
}

void getResponse::MergeFrom(const getResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E477KV.getResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void getResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E477KV.getResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getResponse::CopyFrom(const getResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E477KV.getResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getResponse::IsInitialized() const {
  return true;
}

void getResponse::InternalSwap(getResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace E477KV
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::E477KV::kvRequest* Arena::CreateMaybeMessage< ::E477KV::kvRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::E477KV::kvRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::E477KV::putRequest* Arena::CreateMaybeMessage< ::E477KV::putRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::E477KV::putRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::E477KV::getRequest* Arena::CreateMaybeMessage< ::E477KV::getRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::E477KV::getRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::E477KV::kvResponse* Arena::CreateMaybeMessage< ::E477KV::kvResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::E477KV::kvResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::E477KV::putResponse* Arena::CreateMaybeMessage< ::E477KV::putResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::E477KV::putResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::E477KV::getResponse* Arena::CreateMaybeMessage< ::E477KV::getResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::E477KV::getResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
